### YamlMime:ManagedReference
items:
- uid: LiteEntitySystem.Utils
  commentId: T:LiteEntitySystem.Utils
  id: Utils
  parent: LiteEntitySystem
  children:
  - LiteEntitySystem.Utils.AddToArrayDynamic``1(``0[]@,System.Int32@,``0)
  - LiteEntitySystem.Utils.Encoding
  - LiteEntitySystem.Utils.FastEquals``1(``0@,System.Byte*)
  - LiteEntitySystem.Utils.FastEquals``1(``0@,``0@)
  - LiteEntitySystem.Utils.GetEnumValueInt``1(``0)
  - LiteEntitySystem.Utils.GetEnumValue``1(LiteEntitySystem.SyncVar{``0})
  - LiteEntitySystem.Utils.GetEnumValue``1(``0)
  - LiteEntitySystem.Utils.HasFlagFast``1(LiteEntitySystem.SyncVar{``0},``0)
  - LiteEntitySystem.Utils.HasFlagFast``1(``0,``0)
  - LiteEntitySystem.Utils.InvLerp(System.Single,System.Single,System.Single)
  - LiteEntitySystem.Utils.IsBitSet(System.Byte*,System.Int32)
  - LiteEntitySystem.Utils.IsBitSet(System.Byte[],System.Int32,System.Int32)
  - LiteEntitySystem.Utils.Lerp(System.Double,System.Double,System.Single)
  - LiteEntitySystem.Utils.Lerp(System.Int32,System.Int32,System.Single)
  - LiteEntitySystem.Utils.Lerp(System.Int64,System.Int64,System.Single)
  - LiteEntitySystem.Utils.Lerp(System.Single,System.Single,System.Single)
  - LiteEntitySystem.Utils.LerpSequence(System.UInt16,System.UInt16,System.Single)
  - LiteEntitySystem.Utils.MoveTowards(System.Single,System.Single,System.Single)
  - LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte})
  - LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte},``0@)
  - LiteEntitySystem.Utils.ResizeIfFull``1(``0[]@,System.Int32)
  - LiteEntitySystem.Utils.ResizeOrCreate``1(``0[]@,System.Int32)
  - LiteEntitySystem.Utils.SequenceDiff(System.UInt16,System.UInt16)
  - LiteEntitySystem.Utils.SizeOfStruct``1
  - LiteEntitySystem.Utils.WriteStruct``1(System.Span{System.Byte},``0)
  langs:
  - csharp
  - vb
  name: Utils
  nameWithType: Utils
  fullName: LiteEntitySystem.Utils
  type: Class
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static class Utils
    content.vb: Public Module Utils
  inheritance:
  - System.Object
- uid: LiteEntitySystem.Utils.MoveTowards(System.Single,System.Single,System.Single)
  commentId: M:LiteEntitySystem.Utils.MoveTowards(System.Single,System.Single,System.Single)
  id: MoveTowards(System.Single,System.Single,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: MoveTowards(float, float, float)
  nameWithType: Utils.MoveTowards(float, float, float)
  fullName: LiteEntitySystem.Utils.MoveTowards(float, float, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static float MoveTowards(float current, float target, float maxDelta)
    parameters:
    - id: current
      type: System.Single
    - id: target
      type: System.Single
    - id: maxDelta
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function MoveTowards(current As Single, target As Single, maxDelta As Single) As Single
  overload: LiteEntitySystem.Utils.MoveTowards*
  nameWithType.vb: Utils.MoveTowards(Single, Single, Single)
  fullName.vb: LiteEntitySystem.Utils.MoveTowards(Single, Single, Single)
  name.vb: MoveTowards(Single, Single, Single)
- uid: LiteEntitySystem.Utils.WriteStruct``1(System.Span{System.Byte},``0)
  commentId: M:LiteEntitySystem.Utils.WriteStruct``1(System.Span{System.Byte},``0)
  id: WriteStruct``1(System.Span{System.Byte},``0)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: WriteStruct<T>(Span<byte>, T)
  nameWithType: Utils.WriteStruct<T>(Span<byte>, T)
  fullName: LiteEntitySystem.Utils.WriteStruct<T>(System.Span<byte>, T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static int WriteStruct<T>(this Span<byte> data, T value) where T : unmanaged'
    parameters:
    - id: data
      type: System.Span{System.Byte}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function WriteStruct(Of T As Structure)(data As Span(Of Byte), value As T) As Integer
  overload: LiteEntitySystem.Utils.WriteStruct*
  nameWithType.vb: Utils.WriteStruct(Of T)(Span(Of Byte), T)
  fullName.vb: LiteEntitySystem.Utils.WriteStruct(Of T)(System.Span(Of Byte), T)
  name.vb: WriteStruct(Of T)(Span(Of Byte), T)
- uid: LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte},``0@)
  commentId: M:LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte},``0@)
  id: ReadStruct``1(System.ReadOnlySpan{System.Byte},``0@)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: ReadStruct<T>(ReadOnlySpan<byte>, out T)
  nameWithType: Utils.ReadStruct<T>(ReadOnlySpan<byte>, out T)
  fullName: LiteEntitySystem.Utils.ReadStruct<T>(System.ReadOnlySpan<byte>, out T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static int ReadStruct<T>(this ReadOnlySpan<byte> data, out T value) where T : unmanaged'
    parameters:
    - id: data
      type: System.ReadOnlySpan{System.Byte}
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function ReadStruct(Of T As Structure)(data As ReadOnlySpan(Of Byte), value As T) As Integer
  overload: LiteEntitySystem.Utils.ReadStruct*
  nameWithType.vb: Utils.ReadStruct(Of T)(ReadOnlySpan(Of Byte), T)
  fullName.vb: LiteEntitySystem.Utils.ReadStruct(Of T)(System.ReadOnlySpan(Of Byte), T)
  name.vb: ReadStruct(Of T)(ReadOnlySpan(Of Byte), T)
- uid: LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte})
  commentId: M:LiteEntitySystem.Utils.ReadStruct``1(System.ReadOnlySpan{System.Byte})
  id: ReadStruct``1(System.ReadOnlySpan{System.Byte})
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: ReadStruct<T>(ReadOnlySpan<byte>)
  nameWithType: Utils.ReadStruct<T>(ReadOnlySpan<byte>)
  fullName: LiteEntitySystem.Utils.ReadStruct<T>(System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static T ReadStruct<T>(this ReadOnlySpan<byte> data) where T : unmanaged'
    parameters:
    - id: data
      type: System.ReadOnlySpan{System.Byte}
    typeParameters:
    - id: T
    return:
      type: '{T}'
    content.vb: Public Shared Function ReadStruct(Of T As Structure)(data As ReadOnlySpan(Of Byte)) As T
  overload: LiteEntitySystem.Utils.ReadStruct*
  nameWithType.vb: Utils.ReadStruct(Of T)(ReadOnlySpan(Of Byte))
  fullName.vb: LiteEntitySystem.Utils.ReadStruct(Of T)(System.ReadOnlySpan(Of Byte))
  name.vb: ReadStruct(Of T)(ReadOnlySpan(Of Byte))
- uid: LiteEntitySystem.Utils.SizeOfStruct``1
  commentId: M:LiteEntitySystem.Utils.SizeOfStruct``1
  id: SizeOfStruct``1
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: SizeOfStruct<T>()
  nameWithType: Utils.SizeOfStruct<T>()
  fullName: LiteEntitySystem.Utils.SizeOfStruct<T>()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static int SizeOfStruct<T>() where T : unmanaged'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function SizeOfStruct(Of T As Structure)() As Integer
  overload: LiteEntitySystem.Utils.SizeOfStruct*
  nameWithType.vb: Utils.SizeOfStruct(Of T)()
  fullName.vb: LiteEntitySystem.Utils.SizeOfStruct(Of T)()
  name.vb: SizeOfStruct(Of T)()
- uid: LiteEntitySystem.Utils.HasFlagFast``1(``0,``0)
  commentId: M:LiteEntitySystem.Utils.HasFlagFast``1(``0,``0)
  id: HasFlagFast``1(``0,``0)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: HasFlagFast<T>(T, T)
  nameWithType: Utils.HasFlagFast<T>(T, T)
  fullName: LiteEntitySystem.Utils.HasFlagFast<T>(T, T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static bool HasFlagFast<T>(this T e, T flag) where T : unmanaged, Enum'
    parameters:
    - id: e
      type: '{T}'
    - id: flag
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasFlagFast(Of T As {Structure, [Enum]})(e As T, flag As T) As Boolean
  overload: LiteEntitySystem.Utils.HasFlagFast*
  nameWithType.vb: Utils.HasFlagFast(Of T)(T, T)
  fullName.vb: LiteEntitySystem.Utils.HasFlagFast(Of T)(T, T)
  name.vb: HasFlagFast(Of T)(T, T)
- uid: LiteEntitySystem.Utils.GetEnumValue``1(``0)
  commentId: M:LiteEntitySystem.Utils.GetEnumValue``1(``0)
  id: GetEnumValue``1(``0)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: GetEnumValue<T>(T)
  nameWithType: Utils.GetEnumValue<T>(T)
  fullName: LiteEntitySystem.Utils.GetEnumValue<T>(T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static long GetEnumValue<T>(this T e) where T : unmanaged, Enum'
    parameters:
    - id: e
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function GetEnumValue(Of T As {Structure, [Enum]})(e As T) As Long
  overload: LiteEntitySystem.Utils.GetEnumValue*
  nameWithType.vb: Utils.GetEnumValue(Of T)(T)
  fullName.vb: LiteEntitySystem.Utils.GetEnumValue(Of T)(T)
  name.vb: GetEnumValue(Of T)(T)
- uid: LiteEntitySystem.Utils.GetEnumValueInt``1(``0)
  commentId: M:LiteEntitySystem.Utils.GetEnumValueInt``1(``0)
  id: GetEnumValueInt``1(``0)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: GetEnumValueInt<T>(T)
  nameWithType: Utils.GetEnumValueInt<T>(T)
  fullName: LiteEntitySystem.Utils.GetEnumValueInt<T>(T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static int GetEnumValueInt<T>(this T e) where T : unmanaged, Enum'
    parameters:
    - id: e
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Int32
    content.vb: Public Shared Function GetEnumValueInt(Of T As {Structure, [Enum]})(e As T) As Integer
  overload: LiteEntitySystem.Utils.GetEnumValueInt*
  nameWithType.vb: Utils.GetEnumValueInt(Of T)(T)
  fullName.vb: LiteEntitySystem.Utils.GetEnumValueInt(Of T)(T)
  name.vb: GetEnumValueInt(Of T)(T)
- uid: LiteEntitySystem.Utils.HasFlagFast``1(LiteEntitySystem.SyncVar{``0},``0)
  commentId: M:LiteEntitySystem.Utils.HasFlagFast``1(LiteEntitySystem.SyncVar{``0},``0)
  id: HasFlagFast``1(LiteEntitySystem.SyncVar{``0},``0)
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: HasFlagFast<T>(SyncVar<T>, T)
  nameWithType: Utils.HasFlagFast<T>(SyncVar<T>, T)
  fullName: LiteEntitySystem.Utils.HasFlagFast<T>(LiteEntitySystem.SyncVar<T>, T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static bool HasFlagFast<T>(this SyncVar<T> e, T flag) where T : unmanaged, Enum'
    parameters:
    - id: e
      type: LiteEntitySystem.SyncVar{{T}}
    - id: flag
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function HasFlagFast(Of T As {Structure, [Enum]})(e As SyncVar(Of T), flag As T) As Boolean
  overload: LiteEntitySystem.Utils.HasFlagFast*
  nameWithType.vb: Utils.HasFlagFast(Of T)(SyncVar(Of T), T)
  fullName.vb: LiteEntitySystem.Utils.HasFlagFast(Of T)(LiteEntitySystem.SyncVar(Of T), T)
  name.vb: HasFlagFast(Of T)(SyncVar(Of T), T)
- uid: LiteEntitySystem.Utils.GetEnumValue``1(LiteEntitySystem.SyncVar{``0})
  commentId: M:LiteEntitySystem.Utils.GetEnumValue``1(LiteEntitySystem.SyncVar{``0})
  id: GetEnumValue``1(LiteEntitySystem.SyncVar{``0})
  isExtensionMethod: true
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: GetEnumValue<T>(SyncVar<T>)
  nameWithType: Utils.GetEnumValue<T>(SyncVar<T>)
  fullName: LiteEntitySystem.Utils.GetEnumValue<T>(LiteEntitySystem.SyncVar<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static long GetEnumValue<T>(this SyncVar<T> e) where T : unmanaged, Enum'
    parameters:
    - id: e
      type: LiteEntitySystem.SyncVar{{T}}
    typeParameters:
    - id: T
    return:
      type: System.Int64
    content.vb: Public Shared Function GetEnumValue(Of T As {Structure, [Enum]})(e As SyncVar(Of T)) As Long
  overload: LiteEntitySystem.Utils.GetEnumValue*
  nameWithType.vb: Utils.GetEnumValue(Of T)(SyncVar(Of T))
  fullName.vb: LiteEntitySystem.Utils.GetEnumValue(Of T)(LiteEntitySystem.SyncVar(Of T))
  name.vb: GetEnumValue(Of T)(SyncVar(Of T))
- uid: LiteEntitySystem.Utils.FastEquals``1(``0@,``0@)
  commentId: M:LiteEntitySystem.Utils.FastEquals``1(``0@,``0@)
  id: FastEquals``1(``0@,``0@)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: FastEquals<T>(ref T, ref T)
  nameWithType: Utils.FastEquals<T>(ref T, ref T)
  fullName: LiteEntitySystem.Utils.FastEquals<T>(ref T, ref T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static bool FastEquals<T>(ref T a, ref T b) where T : unmanaged'
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: '{T}'
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function FastEquals(Of T As Structure)(a As T, b As T) As Boolean
  overload: LiteEntitySystem.Utils.FastEquals*
  nameWithType.vb: Utils.FastEquals(Of T)(T, T)
  fullName.vb: LiteEntitySystem.Utils.FastEquals(Of T)(T, T)
  name.vb: FastEquals(Of T)(T, T)
- uid: LiteEntitySystem.Utils.FastEquals``1(``0@,System.Byte*)
  commentId: M:LiteEntitySystem.Utils.FastEquals``1(``0@,System.Byte*)
  id: FastEquals``1(``0@,System.Byte*)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: FastEquals<T>(ref T, byte*)
  nameWithType: Utils.FastEquals<T>(ref T, byte*)
  fullName: LiteEntitySystem.Utils.FastEquals<T>(ref T, byte*)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public static bool FastEquals<T>(ref T a, byte* x2) where T : unmanaged'
    parameters:
    - id: a
      type: '{T}'
    - id: x2
      type: System.Byte*
    typeParameters:
    - id: T
    return:
      type: System.Boolean
    content.vb: Public Shared Function FastEquals(Of T As Structure)(a As T, x2 As Byte*) As Boolean
  overload: LiteEntitySystem.Utils.FastEquals*
  nameWithType.vb: Utils.FastEquals(Of T)(T, Byte*)
  fullName.vb: LiteEntitySystem.Utils.FastEquals(Of T)(T, Byte*)
  name.vb: FastEquals(Of T)(T, Byte*)
- uid: LiteEntitySystem.Utils.ResizeIfFull``1(``0[]@,System.Int32)
  commentId: M:LiteEntitySystem.Utils.ResizeIfFull``1(``0[]@,System.Int32)
  id: ResizeIfFull``1(``0[]@,System.Int32)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: ResizeIfFull<T>(ref T[], int)
  nameWithType: Utils.ResizeIfFull<T>(ref T[], int)
  fullName: LiteEntitySystem.Utils.ResizeIfFull<T>(ref T[], int)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static void ResizeIfFull<T>(ref T[] arr, int count)
    parameters:
    - id: arr
      type: '{T}[]'
    - id: count
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ResizeIfFull(Of T)(arr As T(), count As Integer)
  overload: LiteEntitySystem.Utils.ResizeIfFull*
  nameWithType.vb: Utils.ResizeIfFull(Of T)(T(), Integer)
  fullName.vb: LiteEntitySystem.Utils.ResizeIfFull(Of T)(T(), Integer)
  name.vb: ResizeIfFull(Of T)(T(), Integer)
- uid: LiteEntitySystem.Utils.AddToArrayDynamic``1(``0[]@,System.Int32@,``0)
  commentId: M:LiteEntitySystem.Utils.AddToArrayDynamic``1(``0[]@,System.Int32@,``0)
  id: AddToArrayDynamic``1(``0[]@,System.Int32@,``0)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: AddToArrayDynamic<T>(ref T[], ref int, T)
  nameWithType: Utils.AddToArrayDynamic<T>(ref T[], ref int, T)
  fullName: LiteEntitySystem.Utils.AddToArrayDynamic<T>(ref T[], ref int, T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static void AddToArrayDynamic<T>(ref T[] arr, ref int count, T value)
    parameters:
    - id: arr
      type: '{T}[]'
    - id: count
      type: System.Int32
    - id: value
      type: '{T}'
    typeParameters:
    - id: T
    content.vb: Public Shared Sub AddToArrayDynamic(Of T)(arr As T(), count As Integer, value As T)
  overload: LiteEntitySystem.Utils.AddToArrayDynamic*
  nameWithType.vb: Utils.AddToArrayDynamic(Of T)(T(), Integer, T)
  fullName.vb: LiteEntitySystem.Utils.AddToArrayDynamic(Of T)(T(), Integer, T)
  name.vb: AddToArrayDynamic(Of T)(T(), Integer, T)
- uid: LiteEntitySystem.Utils.ResizeOrCreate``1(``0[]@,System.Int32)
  commentId: M:LiteEntitySystem.Utils.ResizeOrCreate``1(``0[]@,System.Int32)
  id: ResizeOrCreate``1(``0[]@,System.Int32)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: ResizeOrCreate<T>(ref T[], int)
  nameWithType: Utils.ResizeOrCreate<T>(ref T[], int)
  fullName: LiteEntitySystem.Utils.ResizeOrCreate<T>(ref T[], int)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static void ResizeOrCreate<T>(ref T[] arr, int count)
    parameters:
    - id: arr
      type: '{T}[]'
    - id: count
      type: System.Int32
    typeParameters:
    - id: T
    content.vb: Public Shared Sub ResizeOrCreate(Of T)(arr As T(), count As Integer)
  overload: LiteEntitySystem.Utils.ResizeOrCreate*
  nameWithType.vb: Utils.ResizeOrCreate(Of T)(T(), Integer)
  fullName.vb: LiteEntitySystem.Utils.ResizeOrCreate(Of T)(T(), Integer)
  name.vb: ResizeOrCreate(Of T)(T(), Integer)
- uid: LiteEntitySystem.Utils.IsBitSet(System.Byte[],System.Int32,System.Int32)
  commentId: M:LiteEntitySystem.Utils.IsBitSet(System.Byte[],System.Int32,System.Int32)
  id: IsBitSet(System.Byte[],System.Int32,System.Int32)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: IsBitSet(byte[], int, int)
  nameWithType: Utils.IsBitSet(byte[], int, int)
  fullName: LiteEntitySystem.Utils.IsBitSet(byte[], int, int)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool IsBitSet(byte[] byteArray, int offset, int bitNumber)
    parameters:
    - id: byteArray
      type: System.Byte[]
    - id: offset
      type: System.Int32
    - id: bitNumber
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsBitSet(byteArray As Byte(), offset As Integer, bitNumber As Integer) As Boolean
  overload: LiteEntitySystem.Utils.IsBitSet*
  nameWithType.vb: Utils.IsBitSet(Byte(), Integer, Integer)
  fullName.vb: LiteEntitySystem.Utils.IsBitSet(Byte(), Integer, Integer)
  name.vb: IsBitSet(Byte(), Integer, Integer)
- uid: LiteEntitySystem.Utils.IsBitSet(System.Byte*,System.Int32)
  commentId: M:LiteEntitySystem.Utils.IsBitSet(System.Byte*,System.Int32)
  id: IsBitSet(System.Byte*,System.Int32)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: IsBitSet(byte*, int)
  nameWithType: Utils.IsBitSet(byte*, int)
  fullName: LiteEntitySystem.Utils.IsBitSet(byte*, int)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool IsBitSet(byte* byteArray, int bitNumber)
    parameters:
    - id: byteArray
      type: System.Byte*
    - id: bitNumber
      type: System.Int32
    return:
      type: System.Boolean
    content.vb: Public Shared Function IsBitSet(byteArray As Byte*, bitNumber As Integer) As Boolean
  overload: LiteEntitySystem.Utils.IsBitSet*
  nameWithType.vb: Utils.IsBitSet(Byte*, Integer)
  fullName.vb: LiteEntitySystem.Utils.IsBitSet(Byte*, Integer)
  name.vb: IsBitSet(Byte*, Integer)
- uid: LiteEntitySystem.Utils.Lerp(System.Single,System.Single,System.Single)
  commentId: M:LiteEntitySystem.Utils.Lerp(System.Single,System.Single,System.Single)
  id: Lerp(System.Single,System.Single,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: Lerp(float, float, float)
  nameWithType: Utils.Lerp(float, float, float)
  fullName: LiteEntitySystem.Utils.Lerp(float, float, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static float Lerp(float a, float b, float t)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    - id: t
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function Lerp(a As Single, b As Single, t As Single) As Single
  overload: LiteEntitySystem.Utils.Lerp*
  nameWithType.vb: Utils.Lerp(Single, Single, Single)
  fullName.vb: LiteEntitySystem.Utils.Lerp(Single, Single, Single)
  name.vb: Lerp(Single, Single, Single)
- uid: LiteEntitySystem.Utils.InvLerp(System.Single,System.Single,System.Single)
  commentId: M:LiteEntitySystem.Utils.InvLerp(System.Single,System.Single,System.Single)
  id: InvLerp(System.Single,System.Single,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: InvLerp(float, float, float)
  nameWithType: Utils.InvLerp(float, float, float)
  fullName: LiteEntitySystem.Utils.InvLerp(float, float, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static float InvLerp(float a, float b, float v)
    parameters:
    - id: a
      type: System.Single
    - id: b
      type: System.Single
    - id: v
      type: System.Single
    return:
      type: System.Single
    content.vb: Public Shared Function InvLerp(a As Single, b As Single, v As Single) As Single
  overload: LiteEntitySystem.Utils.InvLerp*
  nameWithType.vb: Utils.InvLerp(Single, Single, Single)
  fullName.vb: LiteEntitySystem.Utils.InvLerp(Single, Single, Single)
  name.vb: InvLerp(Single, Single, Single)
- uid: LiteEntitySystem.Utils.Lerp(System.Int64,System.Int64,System.Single)
  commentId: M:LiteEntitySystem.Utils.Lerp(System.Int64,System.Int64,System.Single)
  id: Lerp(System.Int64,System.Int64,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: Lerp(long, long, float)
  nameWithType: Utils.Lerp(long, long, float)
  fullName: LiteEntitySystem.Utils.Lerp(long, long, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static long Lerp(long a, long b, float t)
    parameters:
    - id: a
      type: System.Int64
    - id: b
      type: System.Int64
    - id: t
      type: System.Single
    return:
      type: System.Int64
    content.vb: Public Shared Function Lerp(a As Long, b As Long, t As Single) As Long
  overload: LiteEntitySystem.Utils.Lerp*
  nameWithType.vb: Utils.Lerp(Long, Long, Single)
  fullName.vb: LiteEntitySystem.Utils.Lerp(Long, Long, Single)
  name.vb: Lerp(Long, Long, Single)
- uid: LiteEntitySystem.Utils.Lerp(System.Int32,System.Int32,System.Single)
  commentId: M:LiteEntitySystem.Utils.Lerp(System.Int32,System.Int32,System.Single)
  id: Lerp(System.Int32,System.Int32,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: Lerp(int, int, float)
  nameWithType: Utils.Lerp(int, int, float)
  fullName: LiteEntitySystem.Utils.Lerp(int, int, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static int Lerp(int a, int b, float t)
    parameters:
    - id: a
      type: System.Int32
    - id: b
      type: System.Int32
    - id: t
      type: System.Single
    return:
      type: System.Int32
    content.vb: Public Shared Function Lerp(a As Integer, b As Integer, t As Single) As Integer
  overload: LiteEntitySystem.Utils.Lerp*
  nameWithType.vb: Utils.Lerp(Integer, Integer, Single)
  fullName.vb: LiteEntitySystem.Utils.Lerp(Integer, Integer, Single)
  name.vb: Lerp(Integer, Integer, Single)
- uid: LiteEntitySystem.Utils.Lerp(System.Double,System.Double,System.Single)
  commentId: M:LiteEntitySystem.Utils.Lerp(System.Double,System.Double,System.Single)
  id: Lerp(System.Double,System.Double,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: Lerp(double, double, float)
  nameWithType: Utils.Lerp(double, double, float)
  fullName: LiteEntitySystem.Utils.Lerp(double, double, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static double Lerp(double a, double b, float t)
    parameters:
    - id: a
      type: System.Double
    - id: b
      type: System.Double
    - id: t
      type: System.Single
    return:
      type: System.Double
    content.vb: Public Shared Function Lerp(a As Double, b As Double, t As Single) As Double
  overload: LiteEntitySystem.Utils.Lerp*
  nameWithType.vb: Utils.Lerp(Double, Double, Single)
  fullName.vb: LiteEntitySystem.Utils.Lerp(Double, Double, Single)
  name.vb: Lerp(Double, Double, Single)
- uid: LiteEntitySystem.Utils.LerpSequence(System.UInt16,System.UInt16,System.Single)
  commentId: M:LiteEntitySystem.Utils.LerpSequence(System.UInt16,System.UInt16,System.Single)
  id: LerpSequence(System.UInt16,System.UInt16,System.Single)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: LerpSequence(ushort, ushort, float)
  nameWithType: Utils.LerpSequence(ushort, ushort, float)
  fullName: LiteEntitySystem.Utils.LerpSequence(ushort, ushort, float)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static ushort LerpSequence(ushort seq1, ushort seq2, float t)
    parameters:
    - id: seq1
      type: System.UInt16
    - id: seq2
      type: System.UInt16
    - id: t
      type: System.Single
    return:
      type: System.UInt16
    content.vb: Public Shared Function LerpSequence(seq1 As UShort, seq2 As UShort, t As Single) As UShort
  overload: LiteEntitySystem.Utils.LerpSequence*
  nameWithType.vb: Utils.LerpSequence(UShort, UShort, Single)
  fullName.vb: LiteEntitySystem.Utils.LerpSequence(UShort, UShort, Single)
  name.vb: LerpSequence(UShort, UShort, Single)
- uid: LiteEntitySystem.Utils.SequenceDiff(System.UInt16,System.UInt16)
  commentId: M:LiteEntitySystem.Utils.SequenceDiff(System.UInt16,System.UInt16)
  id: SequenceDiff(System.UInt16,System.UInt16)
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: SequenceDiff(ushort, ushort)
  nameWithType: Utils.SequenceDiff(ushort, ushort)
  fullName: LiteEntitySystem.Utils.SequenceDiff(ushort, ushort)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static int SequenceDiff(ushort newer, ushort older)
    parameters:
    - id: newer
      type: System.UInt16
    - id: older
      type: System.UInt16
    return:
      type: System.Int32
    content.vb: Public Shared Function SequenceDiff(newer As UShort, older As UShort) As Integer
  overload: LiteEntitySystem.Utils.SequenceDiff*
  nameWithType.vb: Utils.SequenceDiff(UShort, UShort)
  fullName.vb: LiteEntitySystem.Utils.SequenceDiff(UShort, UShort)
  name.vb: SequenceDiff(UShort, UShort)
- uid: LiteEntitySystem.Utils.Encoding
  commentId: F:LiteEntitySystem.Utils.Encoding
  id: Encoding
  parent: LiteEntitySystem.Utils
  langs:
  - csharp
  - vb
  name: Encoding
  nameWithType: Utils.Encoding
  fullName: LiteEntitySystem.Utils.Encoding
  type: Field
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static readonly ThreadLocal<UTF8Encoding> Encoding
    return:
      type: System.Threading.ThreadLocal{System.Text.UTF8Encoding}
    content.vb: Public Shared ReadOnly Encoding As ThreadLocal(Of UTF8Encoding)
references:
- uid: LiteEntitySystem
  commentId: N:LiteEntitySystem
  href: LiteEntitySystem.html
  name: LiteEntitySystem
  nameWithType: LiteEntitySystem
  fullName: LiteEntitySystem
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LiteEntitySystem.Utils.MoveTowards*
  commentId: Overload:LiteEntitySystem.Utils.MoveTowards
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_MoveTowards_System_Single_System_Single_System_Single_
  name: MoveTowards
  nameWithType: Utils.MoveTowards
  fullName: LiteEntitySystem.Utils.MoveTowards
- uid: System.Single
  commentId: T:System.Single
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.single
  name: float
  nameWithType: float
  fullName: float
  nameWithType.vb: Single
  fullName.vb: Single
  name.vb: Single
- uid: LiteEntitySystem.Utils.WriteStruct*
  commentId: Overload:LiteEntitySystem.Utils.WriteStruct
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_WriteStruct__1_System_Span_System_Byte____0_
  name: WriteStruct
  nameWithType: Utils.WriteStruct
  fullName: LiteEntitySystem.Utils.WriteStruct
- uid: System.Span{System.Byte}
  commentId: T:System.Span{System.Byte}
  parent: System
  definition: System.Span`1
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<byte>
  nameWithType: Span<byte>
  fullName: System.Span<byte>
  nameWithType.vb: Span(Of Byte)
  fullName.vb: System.Span(Of Byte)
  name.vb: Span(Of Byte)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.Span`1
  commentId: T:System.Span`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.span-1
  name: Span<T>
  nameWithType: Span<T>
  fullName: System.Span<T>
  nameWithType.vb: Span(Of T)
  fullName.vb: System.Span(Of T)
  name.vb: Span(Of T)
  spec.csharp:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Span`1
    name: Span
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.span-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: LiteEntitySystem.Utils.ReadStruct*
  commentId: Overload:LiteEntitySystem.Utils.ReadStruct
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_ReadStruct__1_System_ReadOnlySpan_System_Byte____0__
  name: ReadStruct
  nameWithType: Utils.ReadStruct
  fullName: LiteEntitySystem.Utils.ReadStruct
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.Utils.SizeOfStruct*
  commentId: Overload:LiteEntitySystem.Utils.SizeOfStruct
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_SizeOfStruct__1
  name: SizeOfStruct
  nameWithType: Utils.SizeOfStruct
  fullName: LiteEntitySystem.Utils.SizeOfStruct
- uid: LiteEntitySystem.Utils.HasFlagFast*
  commentId: Overload:LiteEntitySystem.Utils.HasFlagFast
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_HasFlagFast__1___0___0_
  name: HasFlagFast
  nameWithType: Utils.HasFlagFast
  fullName: LiteEntitySystem.Utils.HasFlagFast
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LiteEntitySystem.Utils.GetEnumValue*
  commentId: Overload:LiteEntitySystem.Utils.GetEnumValue
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_GetEnumValue__1___0_
  name: GetEnumValue
  nameWithType: Utils.GetEnumValue
  fullName: LiteEntitySystem.Utils.GetEnumValue
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int64
  name: long
  nameWithType: long
  fullName: long
  nameWithType.vb: Long
  fullName.vb: Long
  name.vb: Long
- uid: LiteEntitySystem.Utils.GetEnumValueInt*
  commentId: Overload:LiteEntitySystem.Utils.GetEnumValueInt
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_GetEnumValueInt__1___0_
  name: GetEnumValueInt
  nameWithType: Utils.GetEnumValueInt
  fullName: LiteEntitySystem.Utils.GetEnumValueInt
- uid: LiteEntitySystem.SyncVar{{T}}
  commentId: T:LiteEntitySystem.SyncVar{``0}
  parent: LiteEntitySystem
  definition: LiteEntitySystem.SyncVar`1
  href: LiteEntitySystem.SyncVar-1.html
  name: SyncVar<T>
  nameWithType: SyncVar<T>
  fullName: LiteEntitySystem.SyncVar<T>
  nameWithType.vb: SyncVar(Of T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T)
  name.vb: SyncVar(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.SyncVar`1
  commentId: T:LiteEntitySystem.SyncVar`1
  parent: LiteEntitySystem
  href: LiteEntitySystem.SyncVar-1.html
  name: SyncVar<T>
  nameWithType: SyncVar<T>
  fullName: LiteEntitySystem.SyncVar<T>
  nameWithType.vb: SyncVar(Of T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T)
  name.vb: SyncVar(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.Utils.FastEquals*
  commentId: Overload:LiteEntitySystem.Utils.FastEquals
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_FastEquals__1___0____0__
  name: FastEquals
  nameWithType: Utils.FastEquals
  fullName: LiteEntitySystem.Utils.FastEquals
- uid: System.Byte*
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte*
  nameWithType: byte*
  fullName: byte*
  nameWithType.vb: Byte*
  fullName.vb: Byte*
  name.vb: Byte*
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '*'
- uid: LiteEntitySystem.Utils.ResizeIfFull*
  commentId: Overload:LiteEntitySystem.Utils.ResizeIfFull
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_ResizeIfFull__1___0____System_Int32_
  name: ResizeIfFull
  nameWithType: Utils.ResizeIfFull
  fullName: LiteEntitySystem.Utils.ResizeIfFull
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: LiteEntitySystem.Utils.AddToArrayDynamic*
  commentId: Overload:LiteEntitySystem.Utils.AddToArrayDynamic
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_AddToArrayDynamic__1___0____System_Int32____0_
  name: AddToArrayDynamic
  nameWithType: Utils.AddToArrayDynamic
  fullName: LiteEntitySystem.Utils.AddToArrayDynamic
- uid: LiteEntitySystem.Utils.ResizeOrCreate*
  commentId: Overload:LiteEntitySystem.Utils.ResizeOrCreate
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_ResizeOrCreate__1___0____System_Int32_
  name: ResizeOrCreate
  nameWithType: Utils.ResizeOrCreate
  fullName: LiteEntitySystem.Utils.ResizeOrCreate
- uid: LiteEntitySystem.Utils.IsBitSet*
  commentId: Overload:LiteEntitySystem.Utils.IsBitSet
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_IsBitSet_System_Byte___System_Int32_System_Int32_
  name: IsBitSet
  nameWithType: Utils.IsBitSet
  fullName: LiteEntitySystem.Utils.IsBitSet
- uid: System.Byte[]
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte[]
  nameWithType: byte[]
  fullName: byte[]
  nameWithType.vb: Byte()
  fullName.vb: Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '['
  - name: ']'
  spec.vb:
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: (
  - name: )
- uid: LiteEntitySystem.Utils.Lerp*
  commentId: Overload:LiteEntitySystem.Utils.Lerp
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_Lerp_System_Single_System_Single_System_Single_
  name: Lerp
  nameWithType: Utils.Lerp
  fullName: LiteEntitySystem.Utils.Lerp
- uid: LiteEntitySystem.Utils.InvLerp*
  commentId: Overload:LiteEntitySystem.Utils.InvLerp
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_InvLerp_System_Single_System_Single_System_Single_
  name: InvLerp
  nameWithType: Utils.InvLerp
  fullName: LiteEntitySystem.Utils.InvLerp
- uid: System.Double
  commentId: T:System.Double
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.double
  name: double
  nameWithType: double
  fullName: double
  nameWithType.vb: Double
  fullName.vb: Double
  name.vb: Double
- uid: LiteEntitySystem.Utils.LerpSequence*
  commentId: Overload:LiteEntitySystem.Utils.LerpSequence
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_LerpSequence_System_UInt16_System_UInt16_System_Single_
  name: LerpSequence
  nameWithType: Utils.LerpSequence
  fullName: LiteEntitySystem.Utils.LerpSequence
- uid: System.UInt16
  commentId: T:System.UInt16
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.uint16
  name: ushort
  nameWithType: ushort
  fullName: ushort
  nameWithType.vb: UShort
  fullName.vb: UShort
  name.vb: UShort
- uid: LiteEntitySystem.Utils.SequenceDiff*
  commentId: Overload:LiteEntitySystem.Utils.SequenceDiff
  href: LiteEntitySystem.Utils.html#LiteEntitySystem_Utils_SequenceDiff_System_UInt16_System_UInt16_
  name: SequenceDiff
  nameWithType: Utils.SequenceDiff
  fullName: LiteEntitySystem.Utils.SequenceDiff
- uid: System.Threading.ThreadLocal{System.Text.UTF8Encoding}
  commentId: T:System.Threading.ThreadLocal{System.Text.UTF8Encoding}
  parent: System.Threading
  definition: System.Threading.ThreadLocal`1
  href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  name: ThreadLocal<UTF8Encoding>
  nameWithType: ThreadLocal<UTF8Encoding>
  fullName: System.Threading.ThreadLocal<System.Text.UTF8Encoding>
  nameWithType.vb: ThreadLocal(Of UTF8Encoding)
  fullName.vb: System.Threading.ThreadLocal(Of System.Text.UTF8Encoding)
  name.vb: ThreadLocal(Of UTF8Encoding)
  spec.csharp:
  - uid: System.Threading.ThreadLocal`1
    name: ThreadLocal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  - name: <
  - uid: System.Text.UTF8Encoding
    name: UTF8Encoding
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.utf8encoding
  - name: '>'
  spec.vb:
  - uid: System.Threading.ThreadLocal`1
    name: ThreadLocal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Text.UTF8Encoding
    name: UTF8Encoding
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.text.utf8encoding
  - name: )
- uid: System.Threading.ThreadLocal`1
  commentId: T:System.Threading.ThreadLocal`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  name: ThreadLocal<T>
  nameWithType: ThreadLocal<T>
  fullName: System.Threading.ThreadLocal<T>
  nameWithType.vb: ThreadLocal(Of T)
  fullName.vb: System.Threading.ThreadLocal(Of T)
  name.vb: ThreadLocal(Of T)
  spec.csharp:
  - uid: System.Threading.ThreadLocal`1
    name: ThreadLocal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Threading.ThreadLocal`1
    name: ThreadLocal
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading.threadlocal-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Threading
    name: Threading
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.threading
