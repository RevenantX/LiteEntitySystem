### YamlMime:ManagedReference
items:
- uid: LiteEntitySystem.ServerEntityManager
  commentId: T:LiteEntitySystem.ServerEntityManager
  id: ServerEntityManager
  parent: LiteEntitySystem
  children:
  - LiteEntitySystem.ServerEntityManager.#ctor(LiteEntitySystem.EntityTypesMap,System.Byte,System.Byte,LiteEntitySystem.ServerSendRate,LiteEntitySystem.MaxHistorySize)
  - LiteEntitySystem.ServerEntityManager.AddAIController``1(System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,LiteEntitySystem.PawnLogic,System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.AddEntity``1(LiteEntitySystem.EntityLogic,System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.AddEntity``1(System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  - LiteEntitySystem.ServerEntityManager.AddSingleton``1(System.Action{``0})
  - LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.NetPlayer,System.ReadOnlySpan{System.Byte})
  - LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.Transport.AbstractNetPeer,System.ReadOnlySpan{System.Byte})
  - LiteEntitySystem.ServerEntityManager.GetPlayer(System.Byte)
  - LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.NetPlayer)
  - LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.Transport.AbstractNetPeer)
  - LiteEntitySystem.ServerEntityManager.GetPlayerController(System.Byte)
  - LiteEntitySystem.ServerEntityManager.MaxStoredInputs
  - LiteEntitySystem.ServerEntityManager.OnLogicTick
  - LiteEntitySystem.ServerEntityManager.PlayersCount
  - LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.NetPlayer)
  - LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  - LiteEntitySystem.ServerEntityManager.Reset
  - LiteEntitySystem.ServerEntityManager.SafeEntityUpdate
  - LiteEntitySystem.ServerEntityManager.SendRate
  - LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(LiteEntitySystem.NetPlayer,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  - LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(System.Byte,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  langs:
  - csharp
  - vb
  name: ServerEntityManager
  nameWithType: ServerEntityManager
  fullName: LiteEntitySystem.ServerEntityManager
  type: Class
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Server entity manager
  example: []
  syntax:
    content: 'public sealed class ServerEntityManager : EntityManager'
    content.vb: Public NotInheritable Class ServerEntityManager Inherits EntityManager
  inheritance:
  - System.Object
  - LiteEntitySystem.EntityManager
  inheritedMembers:
  - LiteEntitySystem.EntityManager.MaxSyncedEntityCount
  - LiteEntitySystem.EntityManager.MaxEntityCount
  - LiteEntitySystem.EntityManager.MaxLocalEntityCount
  - LiteEntitySystem.EntityManager.ServerPlayerId
  - LiteEntitySystem.EntityManager.InvalidEntityId
  - LiteEntitySystem.EntityManager.EntitiesCount
  - LiteEntitySystem.EntityManager.Tick
  - LiteEntitySystem.EntityManager.LerpFactor
  - LiteEntitySystem.EntityManager.UpdateMode
  - LiteEntitySystem.EntityManager.Mode
  - LiteEntitySystem.EntityManager.IsServer
  - LiteEntitySystem.EntityManager.IsClient
  - LiteEntitySystem.EntityManager.Tickrate
  - LiteEntitySystem.EntityManager.DeltaTime
  - LiteEntitySystem.EntityManager.DeltaTimeF
  - LiteEntitySystem.EntityManager.MaxHistorySize
  - LiteEntitySystem.EntityManager.PlayerId
  - LiteEntitySystem.EntityManager.HeaderByte
  - LiteEntitySystem.EntityManager.InRollBackState
  - LiteEntitySystem.EntityManager.InNormalState
  - LiteEntitySystem.EntityManager.VisualDeltaTime
  - LiteEntitySystem.EntityManager.VisualDeltaTimeF
  - LiteEntitySystem.EntityManager.MaxPlayers
  - LiteEntitySystem.EntityManager.IsRunning
  - LiteEntitySystem.EntityManager.IsLagCompensationEnabled
  - LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{{T}})
  - LiteEntitySystem.EntityManager.RegisterFieldType``1
  - LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(System.UInt16)
  - LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity,LiteEntitySystem.IEntitySyncVarInfoPrinter)
  - LiteEntitySystem.EntityManager.GetEntityById``1(LiteEntitySystem.EntitySharedReference)
  - LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,{T}@)
  - LiteEntitySystem.EntityManager.GetEntities``1
  - LiteEntitySystem.EntityManager.GetControllers``1
  - LiteEntitySystem.EntityManager.GetSingleton``1
  - LiteEntitySystem.EntityManager.HasSingleton``1
  - LiteEntitySystem.EntityManager.AddLocalSingleton``1({T})
  - LiteEntitySystem.EntityManager.GetLocalSingleton``1
  - LiteEntitySystem.EntityManager.TryGetLocalSingleton``1({T}@)
  - LiteEntitySystem.EntityManager.TryGetSingleton``1({T}@)
  - LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
  - LiteEntitySystem.EntityManager.DisableLagCompensation
  - LiteEntitySystem.EntityManager.Update
- uid: LiteEntitySystem.ServerEntityManager.MaxStoredInputs
  commentId: F:LiteEntitySystem.ServerEntityManager.MaxStoredInputs
  id: MaxStoredInputs
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: MaxStoredInputs
  nameWithType: ServerEntityManager.MaxStoredInputs
  fullName: LiteEntitySystem.ServerEntityManager.MaxStoredInputs
  type: Field
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public const int MaxStoredInputs = 30
    return:
      type: System.Int32
    content.vb: Public Const MaxStoredInputs As Integer = 30
- uid: LiteEntitySystem.ServerEntityManager.PlayersCount
  commentId: P:LiteEntitySystem.ServerEntityManager.PlayersCount
  id: PlayersCount
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: PlayersCount
  nameWithType: ServerEntityManager.PlayersCount
  fullName: LiteEntitySystem.ServerEntityManager.PlayersCount
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Network players count
  example: []
  syntax:
    content: public int PlayersCount { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property PlayersCount As Integer
  overload: LiteEntitySystem.ServerEntityManager.PlayersCount*
- uid: LiteEntitySystem.ServerEntityManager.SendRate
  commentId: F:LiteEntitySystem.ServerEntityManager.SendRate
  id: SendRate
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: SendRate
  nameWithType: ServerEntityManager.SendRate
  fullName: LiteEntitySystem.ServerEntityManager.SendRate
  type: Field
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Rate at which server will make and send packets
  example: []
  syntax:
    content: public readonly ServerSendRate SendRate
    return:
      type: LiteEntitySystem.ServerSendRate
    content.vb: Public ReadOnly SendRate As ServerSendRate
- uid: LiteEntitySystem.ServerEntityManager.SafeEntityUpdate
  commentId: F:LiteEntitySystem.ServerEntityManager.SafeEntityUpdate
  id: SafeEntityUpdate
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: SafeEntityUpdate
  nameWithType: ServerEntityManager.SafeEntityUpdate
  fullName: LiteEntitySystem.ServerEntityManager.SafeEntityUpdate
  type: Field
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add try catch to entity updates
  example: []
  syntax:
    content: public bool SafeEntityUpdate
    return:
      type: System.Boolean
    content.vb: Public SafeEntityUpdate As Boolean
- uid: LiteEntitySystem.ServerEntityManager.#ctor(LiteEntitySystem.EntityTypesMap,System.Byte,System.Byte,LiteEntitySystem.ServerSendRate,LiteEntitySystem.MaxHistorySize)
  commentId: M:LiteEntitySystem.ServerEntityManager.#ctor(LiteEntitySystem.EntityTypesMap,System.Byte,System.Byte,LiteEntitySystem.ServerSendRate,LiteEntitySystem.MaxHistorySize)
  id: '#ctor(LiteEntitySystem.EntityTypesMap,System.Byte,System.Byte,LiteEntitySystem.ServerSendRate,LiteEntitySystem.MaxHistorySize)'
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: ServerEntityManager(EntityTypesMap, byte, byte, ServerSendRate, MaxHistorySize)
  nameWithType: ServerEntityManager.ServerEntityManager(EntityTypesMap, byte, byte, ServerSendRate, MaxHistorySize)
  fullName: LiteEntitySystem.ServerEntityManager.ServerEntityManager(LiteEntitySystem.EntityTypesMap, byte, byte, LiteEntitySystem.ServerSendRate, LiteEntitySystem.MaxHistorySize)
  type: Constructor
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Constructor
  example: []
  syntax:
    content: public ServerEntityManager(EntityTypesMap typesMap, byte packetHeader, byte framesPerSecond, ServerSendRate sendRate, MaxHistorySize maxHistorySize = MaxHistorySize.Size32)
    parameters:
    - id: typesMap
      type: LiteEntitySystem.EntityTypesMap
      description: EntityTypesMap with registered entity types
    - id: packetHeader
      type: System.Byte
      description: Header byte that will be used for packets (to distinguish entity system packets)
    - id: framesPerSecond
      type: System.Byte
      description: Fixed framerate of game logic
    - id: sendRate
      type: LiteEntitySystem.ServerSendRate
      description: Send rate of server (depends on fps)
    - id: maxHistorySize
      type: LiteEntitySystem.MaxHistorySize
      description: Maximum size of lag compensation history in ticks
    content.vb: Public Sub New(typesMap As EntityTypesMap, packetHeader As Byte, framesPerSecond As Byte, sendRate As ServerSendRate, maxHistorySize As MaxHistorySize = MaxHistorySize.Size32)
  overload: LiteEntitySystem.ServerEntityManager.#ctor*
  nameWithType.vb: ServerEntityManager.New(EntityTypesMap, Byte, Byte, ServerSendRate, MaxHistorySize)
  fullName.vb: LiteEntitySystem.ServerEntityManager.New(LiteEntitySystem.EntityTypesMap, Byte, Byte, LiteEntitySystem.ServerSendRate, LiteEntitySystem.MaxHistorySize)
  name.vb: New(EntityTypesMap, Byte, Byte, ServerSendRate, MaxHistorySize)
- uid: LiteEntitySystem.ServerEntityManager.Reset
  commentId: M:LiteEntitySystem.ServerEntityManager.Reset
  id: Reset
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: Reset()
  nameWithType: ServerEntityManager.Reset()
  fullName: LiteEntitySystem.ServerEntityManager.Reset()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Remove all entities and reset all counters and timers
  example: []
  syntax:
    content: public override void Reset()
    content.vb: Public Overrides Sub Reset()
  overridden: LiteEntitySystem.EntityManager.Reset
  overload: LiteEntitySystem.ServerEntityManager.Reset*
- uid: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(System.Byte,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  commentId: M:LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(System.Byte,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  id: ToggleSyncGroup(System.Byte,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: ToggleSyncGroup(byte, EntityLogic, SyncGroup, bool)
  nameWithType: ServerEntityManager.ToggleSyncGroup(byte, EntityLogic, SyncGroup, bool)
  fullName: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(byte, LiteEntitySystem.EntityLogic, LiteEntitySystem.SyncGroup, bool)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: >-
    Change SyncVar and RPC synchronization by SyncGroup for player

    constructor and destruction will be synchronized anyways

    works only on server
  example: []
  syntax:
    content: public void ToggleSyncGroup(byte forPlayer, EntityLogic entity, SyncGroup syncGroup, bool enable)
    parameters:
    - id: forPlayer
      type: System.Byte
      description: For which player
    - id: entity
      type: LiteEntitySystem.EntityLogic
      description: entity
    - id: syncGroup
      type: LiteEntitySystem.SyncGroup
      description: syncGroup to enable/disable
    - id: enable
      type: System.Boolean
      description: true - enable sync (if was disabled), disable otherwise
    content.vb: Public Sub ToggleSyncGroup(forPlayer As Byte, entity As EntityLogic, syncGroup As SyncGroup, enable As Boolean)
  overload: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup*
  nameWithType.vb: ServerEntityManager.ToggleSyncGroup(Byte, EntityLogic, SyncGroup, Boolean)
  fullName.vb: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(Byte, LiteEntitySystem.EntityLogic, LiteEntitySystem.SyncGroup, Boolean)
  name.vb: ToggleSyncGroup(Byte, EntityLogic, SyncGroup, Boolean)
- uid: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(LiteEntitySystem.NetPlayer,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  commentId: M:LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(LiteEntitySystem.NetPlayer,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  id: ToggleSyncGroup(LiteEntitySystem.NetPlayer,LiteEntitySystem.EntityLogic,LiteEntitySystem.SyncGroup,System.Boolean)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: ToggleSyncGroup(NetPlayer, EntityLogic, SyncGroup, bool)
  nameWithType: ServerEntityManager.ToggleSyncGroup(NetPlayer, EntityLogic, SyncGroup, bool)
  fullName: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(LiteEntitySystem.NetPlayer, LiteEntitySystem.EntityLogic, LiteEntitySystem.SyncGroup, bool)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: >-
    Change SyncVar and RPC synchronization by SyncGroup for player

    constructor and destruction will be synchronized anyways

    works only on server
  example: []
  syntax:
    content: public void ToggleSyncGroup(NetPlayer forPlayer, EntityLogic entity, SyncGroup syncGroup, bool enable)
    parameters:
    - id: forPlayer
      type: LiteEntitySystem.NetPlayer
      description: For which player
    - id: entity
      type: LiteEntitySystem.EntityLogic
      description: entity
    - id: syncGroup
      type: LiteEntitySystem.SyncGroup
      description: syncGroup to enable/disable
    - id: enable
      type: System.Boolean
      description: true - enable sync (if was disabled), disable otherwise
    content.vb: Public Sub ToggleSyncGroup(forPlayer As NetPlayer, entity As EntityLogic, syncGroup As SyncGroup, enable As Boolean)
  overload: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup*
  nameWithType.vb: ServerEntityManager.ToggleSyncGroup(NetPlayer, EntityLogic, SyncGroup, Boolean)
  fullName.vb: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup(LiteEntitySystem.NetPlayer, LiteEntitySystem.EntityLogic, LiteEntitySystem.SyncGroup, Boolean)
  name.vb: ToggleSyncGroup(NetPlayer, EntityLogic, SyncGroup, Boolean)
- uid: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  commentId: M:LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  id: AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddPlayer(AbstractNetPeer)
  nameWithType: ServerEntityManager.AddPlayer(AbstractNetPeer)
  fullName: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Create and add new player
  example: []
  syntax:
    content: public NetPlayer AddPlayer(AbstractNetPeer peer)
    parameters:
    - id: peer
      type: LiteEntitySystem.Transport.AbstractNetPeer
      description: AbstractPeer to use
    return:
      type: LiteEntitySystem.NetPlayer
      description: Newly created player, null if players count is maximum
    content.vb: Public Function AddPlayer(peer As AbstractNetPeer) As NetPlayer
  overload: LiteEntitySystem.ServerEntityManager.AddPlayer*
- uid: LiteEntitySystem.ServerEntityManager.GetPlayer(System.Byte)
  commentId: M:LiteEntitySystem.ServerEntityManager.GetPlayer(System.Byte)
  id: GetPlayer(System.Byte)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: GetPlayer(byte)
  nameWithType: ServerEntityManager.GetPlayer(byte)
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayer(byte)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Get player by owner id
  example: []
  syntax:
    content: public NetPlayer GetPlayer(byte ownerId)
    parameters:
    - id: ownerId
      type: System.Byte
      description: id of player owner (Entity.OwnerId)
    return:
      type: LiteEntitySystem.NetPlayer
      description: ''
    content.vb: Public Function GetPlayer(ownerId As Byte) As NetPlayer
  overload: LiteEntitySystem.ServerEntityManager.GetPlayer*
  nameWithType.vb: ServerEntityManager.GetPlayer(Byte)
  fullName.vb: LiteEntitySystem.ServerEntityManager.GetPlayer(Byte)
  name.vb: GetPlayer(Byte)
- uid: LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  commentId: M:LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  id: RemovePlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: RemovePlayer(AbstractNetPeer)
  nameWithType: ServerEntityManager.RemovePlayer(AbstractNetPeer)
  fullName: LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Remove player using NetPeer.Tag (is you assigned it or used <xref href="LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)" data-throw-if-not-resolved="false"></xref> with assignToTag)
  example: []
  syntax:
    content: public bool RemovePlayer(AbstractNetPeer player)
    parameters:
    - id: player
      type: LiteEntitySystem.Transport.AbstractNetPeer
      description: player to remove
    return:
      type: System.Boolean
      description: true if player removed successfully, false if player not found
    content.vb: Public Function RemovePlayer(player As AbstractNetPeer) As Boolean
  overload: LiteEntitySystem.ServerEntityManager.RemovePlayer*
- uid: LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.NetPlayer)
  commentId: M:LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.NetPlayer)
  id: RemovePlayer(LiteEntitySystem.NetPlayer)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: RemovePlayer(NetPlayer)
  nameWithType: ServerEntityManager.RemovePlayer(NetPlayer)
  fullName: LiteEntitySystem.ServerEntityManager.RemovePlayer(LiteEntitySystem.NetPlayer)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Remove player and it's owned entities
  example: []
  syntax:
    content: public bool RemovePlayer(NetPlayer player)
    parameters:
    - id: player
      type: LiteEntitySystem.NetPlayer
      description: player to remove
    return:
      type: System.Boolean
      description: true if player removed successfully, false if player not found
    content.vb: Public Function RemovePlayer(player As NetPlayer) As Boolean
  overload: LiteEntitySystem.ServerEntityManager.RemovePlayer*
- uid: LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.Transport.AbstractNetPeer)
  commentId: M:LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.Transport.AbstractNetPeer)
  id: GetPlayerController(LiteEntitySystem.Transport.AbstractNetPeer)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: GetPlayerController(AbstractNetPeer)
  nameWithType: ServerEntityManager.GetPlayerController(AbstractNetPeer)
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.Transport.AbstractNetPeer)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Returns controller owned by the player
  example: []
  syntax:
    content: public HumanControllerLogic GetPlayerController(AbstractNetPeer player)
    parameters:
    - id: player
      type: LiteEntitySystem.Transport.AbstractNetPeer
      description: player
    return:
      type: LiteEntitySystem.HumanControllerLogic
      description: Instance if found, null if not
    content.vb: Public Function GetPlayerController(player As AbstractNetPeer) As HumanControllerLogic
  overload: LiteEntitySystem.ServerEntityManager.GetPlayerController*
- uid: LiteEntitySystem.ServerEntityManager.GetPlayerController(System.Byte)
  commentId: M:LiteEntitySystem.ServerEntityManager.GetPlayerController(System.Byte)
  id: GetPlayerController(System.Byte)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: GetPlayerController(byte)
  nameWithType: ServerEntityManager.GetPlayerController(byte)
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayerController(byte)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Returns controller owned by the player
  example: []
  syntax:
    content: public HumanControllerLogic GetPlayerController(byte playerId)
    parameters:
    - id: playerId
      type: System.Byte
      description: player
    return:
      type: LiteEntitySystem.HumanControllerLogic
      description: Instance if found, null if not
    content.vb: Public Function GetPlayerController(playerId As Byte) As HumanControllerLogic
  overload: LiteEntitySystem.ServerEntityManager.GetPlayerController*
  nameWithType.vb: ServerEntityManager.GetPlayerController(Byte)
  fullName.vb: LiteEntitySystem.ServerEntityManager.GetPlayerController(Byte)
  name.vb: GetPlayerController(Byte)
- uid: LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.NetPlayer)
  commentId: M:LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.NetPlayer)
  id: GetPlayerController(LiteEntitySystem.NetPlayer)
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: GetPlayerController(NetPlayer)
  nameWithType: ServerEntityManager.GetPlayerController(NetPlayer)
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayerController(LiteEntitySystem.NetPlayer)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Returns controller owned by the player
  example: []
  syntax:
    content: public HumanControllerLogic GetPlayerController(NetPlayer player)
    parameters:
    - id: player
      type: LiteEntitySystem.NetPlayer
      description: player to remove
    return:
      type: LiteEntitySystem.HumanControllerLogic
      description: Instance if found, null if not
    content.vb: Public Function GetPlayerController(player As NetPlayer) As HumanControllerLogic
  overload: LiteEntitySystem.ServerEntityManager.GetPlayerController*
- uid: LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,System.Action{``0})
  id: AddController``1(LiteEntitySystem.NetPlayer,System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddController<T>(NetPlayer, Action<T>)
  nameWithType: ServerEntityManager.AddController<T>(NetPlayer, Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddController<T>(LiteEntitySystem.NetPlayer, System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new player controller entity
  example: []
  syntax:
    content: 'public T AddController<T>(NetPlayer owner, Action<T> initMethod = null) where T : HumanControllerLogic'
    parameters:
    - id: owner
      type: LiteEntitySystem.NetPlayer
      description: Player that owns this controller
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddController(Of T As HumanControllerLogic)(owner As NetPlayer, initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddController*
  nameWithType.vb: ServerEntityManager.AddController(Of T)(NetPlayer, Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddController(Of T)(LiteEntitySystem.NetPlayer, System.Action(Of T))
  name.vb: AddController(Of T)(NetPlayer, Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,LiteEntitySystem.PawnLogic,System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddController``1(LiteEntitySystem.NetPlayer,LiteEntitySystem.PawnLogic,System.Action{``0})
  id: AddController``1(LiteEntitySystem.NetPlayer,LiteEntitySystem.PawnLogic,System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddController<T>(NetPlayer, PawnLogic, Action<T>)
  nameWithType: ServerEntityManager.AddController<T>(NetPlayer, PawnLogic, Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddController<T>(LiteEntitySystem.NetPlayer, LiteEntitySystem.PawnLogic, System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new player controller entity and start controlling entityToControl
  example: []
  syntax:
    content: 'public T AddController<T>(NetPlayer owner, PawnLogic entityToControl, Action<T> initMethod = null) where T : HumanControllerLogic'
    parameters:
    - id: owner
      type: LiteEntitySystem.NetPlayer
      description: Player that owns this controller
    - id: entityToControl
      type: LiteEntitySystem.PawnLogic
      description: pawn that will be controlled
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddController(Of T As HumanControllerLogic)(owner As NetPlayer, entityToControl As PawnLogic, initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddController*
  nameWithType.vb: ServerEntityManager.AddController(Of T)(NetPlayer, PawnLogic, Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddController(Of T)(LiteEntitySystem.NetPlayer, LiteEntitySystem.PawnLogic, System.Action(Of T))
  name.vb: AddController(Of T)(NetPlayer, PawnLogic, Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.AddAIController``1(System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddAIController``1(System.Action{``0})
  id: AddAIController``1(System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddAIController<T>(Action<T>)
  nameWithType: ServerEntityManager.AddAIController<T>(Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddAIController<T>(System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new AI controller entity
  example: []
  syntax:
    content: 'public T AddAIController<T>(Action<T> initMethod = null) where T : AiControllerLogic'
    parameters:
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddAIController(Of T As AiControllerLogic)(initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddAIController*
  nameWithType.vb: ServerEntityManager.AddAIController(Of T)(Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddAIController(Of T)(System.Action(Of T))
  name.vb: AddAIController(Of T)(Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.AddSingleton``1(System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddSingleton``1(System.Action{``0})
  id: AddSingleton``1(System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddSingleton<T>(Action<T>)
  nameWithType: ServerEntityManager.AddSingleton<T>(Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddSingleton<T>(System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new entity
  example: []
  syntax:
    content: 'public T AddSingleton<T>(Action<T> initMethod = null) where T : SingletonEntityLogic'
    parameters:
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddSingleton(Of T As SingletonEntityLogic)(initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddSingleton*
  nameWithType.vb: ServerEntityManager.AddSingleton(Of T)(Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddSingleton(Of T)(System.Action(Of T))
  name.vb: AddSingleton(Of T)(Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.AddEntity``1(System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddEntity``1(System.Action{``0})
  id: AddEntity``1(System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddEntity<T>(Action<T>)
  nameWithType: ServerEntityManager.AddEntity<T>(Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddEntity<T>(System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new entity
  example: []
  syntax:
    content: 'public T AddEntity<T>(Action<T> initMethod = null) where T : EntityLogic'
    parameters:
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddEntity(Of T As EntityLogic)(initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddEntity*
  nameWithType.vb: ServerEntityManager.AddEntity(Of T)(Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddEntity(Of T)(System.Action(Of T))
  name.vb: AddEntity(Of T)(Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.AddEntity``1(LiteEntitySystem.EntityLogic,System.Action{``0})
  commentId: M:LiteEntitySystem.ServerEntityManager.AddEntity``1(LiteEntitySystem.EntityLogic,System.Action{``0})
  id: AddEntity``1(LiteEntitySystem.EntityLogic,System.Action{``0})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: AddEntity<T>(EntityLogic, Action<T>)
  nameWithType: ServerEntityManager.AddEntity<T>(EntityLogic, Action<T>)
  fullName: LiteEntitySystem.ServerEntityManager.AddEntity<T>(LiteEntitySystem.EntityLogic, System.Action<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Add new entity and set parent entity
  example: []
  syntax:
    content: 'public T AddEntity<T>(EntityLogic parent, Action<T> initMethod = null) where T : EntityLogic'
    parameters:
    - id: parent
      type: LiteEntitySystem.EntityLogic
      description: Parent entity
    - id: initMethod
      type: System.Action{{T}}
      description: Method that will be called after entity construction
    typeParameters:
    - id: T
      description: Entity type
    return:
      type: '{T}'
      description: Created entity or null in case of limit
    content.vb: Public Function AddEntity(Of T As EntityLogic)(parent As EntityLogic, initMethod As Action(Of T) = Nothing) As T
  overload: LiteEntitySystem.ServerEntityManager.AddEntity*
  nameWithType.vb: ServerEntityManager.AddEntity(Of T)(EntityLogic, Action(Of T))
  fullName.vb: LiteEntitySystem.ServerEntityManager.AddEntity(Of T)(LiteEntitySystem.EntityLogic, System.Action(Of T))
  name.vb: AddEntity(Of T)(EntityLogic, Action(Of T))
- uid: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.Transport.AbstractNetPeer,System.ReadOnlySpan{System.Byte})
  commentId: M:LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.Transport.AbstractNetPeer,System.ReadOnlySpan{System.Byte})
  id: Deserialize(LiteEntitySystem.Transport.AbstractNetPeer,System.ReadOnlySpan{System.Byte})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: Deserialize(AbstractNetPeer, ReadOnlySpan<byte>)
  nameWithType: ServerEntityManager.Deserialize(AbstractNetPeer, ReadOnlySpan<byte>)
  fullName: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.Transport.AbstractNetPeer, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Read data for player linked to AbstractNetPeer
  example: []
  syntax:
    content: public DeserializeResult Deserialize(AbstractNetPeer peer, ReadOnlySpan<byte> inData)
    parameters:
    - id: peer
      type: LiteEntitySystem.Transport.AbstractNetPeer
      description: Player that sent input
    - id: inData
      type: System.ReadOnlySpan{System.Byte}
      description: incoming data with header
    return:
      type: LiteEntitySystem.DeserializeResult
    content.vb: Public Function Deserialize(peer As AbstractNetPeer, inData As ReadOnlySpan(Of Byte)) As DeserializeResult
  overload: LiteEntitySystem.ServerEntityManager.Deserialize*
  nameWithType.vb: ServerEntityManager.Deserialize(AbstractNetPeer, ReadOnlySpan(Of Byte))
  fullName.vb: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.Transport.AbstractNetPeer, System.ReadOnlySpan(Of Byte))
  name.vb: Deserialize(AbstractNetPeer, ReadOnlySpan(Of Byte))
- uid: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.NetPlayer,System.ReadOnlySpan{System.Byte})
  commentId: M:LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.NetPlayer,System.ReadOnlySpan{System.Byte})
  id: Deserialize(LiteEntitySystem.NetPlayer,System.ReadOnlySpan{System.Byte})
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: Deserialize(NetPlayer, ReadOnlySpan<byte>)
  nameWithType: ServerEntityManager.Deserialize(NetPlayer, ReadOnlySpan<byte>)
  fullName: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.NetPlayer, System.ReadOnlySpan<byte>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Read data from NetPlayer
  example: []
  syntax:
    content: public DeserializeResult Deserialize(NetPlayer player, ReadOnlySpan<byte> inData)
    parameters:
    - id: player
      type: LiteEntitySystem.NetPlayer
      description: Player that sent input
    - id: inData
      type: System.ReadOnlySpan{System.Byte}
      description: incoming data with header
    return:
      type: LiteEntitySystem.DeserializeResult
    content.vb: Public Function Deserialize(player As NetPlayer, inData As ReadOnlySpan(Of Byte)) As DeserializeResult
  overload: LiteEntitySystem.ServerEntityManager.Deserialize*
  nameWithType.vb: ServerEntityManager.Deserialize(NetPlayer, ReadOnlySpan(Of Byte))
  fullName.vb: LiteEntitySystem.ServerEntityManager.Deserialize(LiteEntitySystem.NetPlayer, System.ReadOnlySpan(Of Byte))
  name.vb: Deserialize(NetPlayer, ReadOnlySpan(Of Byte))
- uid: LiteEntitySystem.ServerEntityManager.OnLogicTick
  commentId: M:LiteEntitySystem.ServerEntityManager.OnLogicTick
  id: OnLogicTick
  parent: LiteEntitySystem.ServerEntityManager
  langs:
  - csharp
  - vb
  name: OnLogicTick()
  nameWithType: ServerEntityManager.OnLogicTick()
  fullName: LiteEntitySystem.ServerEntityManager.OnLogicTick()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  example: []
  syntax:
    content: protected override void OnLogicTick()
    content.vb: Protected Overrides Sub OnLogicTick()
  overridden: LiteEntitySystem.EntityManager.OnLogicTick
  overload: LiteEntitySystem.ServerEntityManager.OnLogicTick*
references:
- uid: LiteEntitySystem
  commentId: N:LiteEntitySystem
  href: LiteEntitySystem.html
  name: LiteEntitySystem
  nameWithType: LiteEntitySystem
  fullName: LiteEntitySystem
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: LiteEntitySystem.EntityManager
  commentId: T:LiteEntitySystem.EntityManager
  parent: LiteEntitySystem
  href: LiteEntitySystem.EntityManager.html
  name: EntityManager
  nameWithType: EntityManager
  fullName: LiteEntitySystem.EntityManager
- uid: LiteEntitySystem.EntityManager.MaxSyncedEntityCount
  commentId: F:LiteEntitySystem.EntityManager.MaxSyncedEntityCount
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_MaxSyncedEntityCount
  name: MaxSyncedEntityCount
  nameWithType: EntityManager.MaxSyncedEntityCount
  fullName: LiteEntitySystem.EntityManager.MaxSyncedEntityCount
- uid: LiteEntitySystem.EntityManager.MaxEntityCount
  commentId: F:LiteEntitySystem.EntityManager.MaxEntityCount
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_MaxEntityCount
  name: MaxEntityCount
  nameWithType: EntityManager.MaxEntityCount
  fullName: LiteEntitySystem.EntityManager.MaxEntityCount
- uid: LiteEntitySystem.EntityManager.MaxLocalEntityCount
  commentId: F:LiteEntitySystem.EntityManager.MaxLocalEntityCount
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_MaxLocalEntityCount
  name: MaxLocalEntityCount
  nameWithType: EntityManager.MaxLocalEntityCount
  fullName: LiteEntitySystem.EntityManager.MaxLocalEntityCount
- uid: LiteEntitySystem.EntityManager.ServerPlayerId
  commentId: F:LiteEntitySystem.EntityManager.ServerPlayerId
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_ServerPlayerId
  name: ServerPlayerId
  nameWithType: EntityManager.ServerPlayerId
  fullName: LiteEntitySystem.EntityManager.ServerPlayerId
- uid: LiteEntitySystem.EntityManager.InvalidEntityId
  commentId: F:LiteEntitySystem.EntityManager.InvalidEntityId
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_InvalidEntityId
  name: InvalidEntityId
  nameWithType: EntityManager.InvalidEntityId
  fullName: LiteEntitySystem.EntityManager.InvalidEntityId
- uid: LiteEntitySystem.EntityManager.EntitiesCount
  commentId: P:LiteEntitySystem.EntityManager.EntitiesCount
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_EntitiesCount
  name: EntitiesCount
  nameWithType: EntityManager.EntitiesCount
  fullName: LiteEntitySystem.EntityManager.EntitiesCount
- uid: LiteEntitySystem.EntityManager.Tick
  commentId: P:LiteEntitySystem.EntityManager.Tick
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Tick
  name: Tick
  nameWithType: EntityManager.Tick
  fullName: LiteEntitySystem.EntityManager.Tick
- uid: LiteEntitySystem.EntityManager.LerpFactor
  commentId: P:LiteEntitySystem.EntityManager.LerpFactor
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_LerpFactor
  name: LerpFactor
  nameWithType: EntityManager.LerpFactor
  fullName: LiteEntitySystem.EntityManager.LerpFactor
- uid: LiteEntitySystem.EntityManager.UpdateMode
  commentId: P:LiteEntitySystem.EntityManager.UpdateMode
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_UpdateMode
  name: UpdateMode
  nameWithType: EntityManager.UpdateMode
  fullName: LiteEntitySystem.EntityManager.UpdateMode
- uid: LiteEntitySystem.EntityManager.Mode
  commentId: F:LiteEntitySystem.EntityManager.Mode
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Mode
  name: Mode
  nameWithType: EntityManager.Mode
  fullName: LiteEntitySystem.EntityManager.Mode
- uid: LiteEntitySystem.EntityManager.IsServer
  commentId: F:LiteEntitySystem.EntityManager.IsServer
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_IsServer
  name: IsServer
  nameWithType: EntityManager.IsServer
  fullName: LiteEntitySystem.EntityManager.IsServer
- uid: LiteEntitySystem.EntityManager.IsClient
  commentId: F:LiteEntitySystem.EntityManager.IsClient
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_IsClient
  name: IsClient
  nameWithType: EntityManager.IsClient
  fullName: LiteEntitySystem.EntityManager.IsClient
- uid: LiteEntitySystem.EntityManager.Tickrate
  commentId: P:LiteEntitySystem.EntityManager.Tickrate
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Tickrate
  name: Tickrate
  nameWithType: EntityManager.Tickrate
  fullName: LiteEntitySystem.EntityManager.Tickrate
- uid: LiteEntitySystem.EntityManager.DeltaTime
  commentId: P:LiteEntitySystem.EntityManager.DeltaTime
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_DeltaTime
  name: DeltaTime
  nameWithType: EntityManager.DeltaTime
  fullName: LiteEntitySystem.EntityManager.DeltaTime
- uid: LiteEntitySystem.EntityManager.DeltaTimeF
  commentId: P:LiteEntitySystem.EntityManager.DeltaTimeF
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_DeltaTimeF
  name: DeltaTimeF
  nameWithType: EntityManager.DeltaTimeF
  fullName: LiteEntitySystem.EntityManager.DeltaTimeF
- uid: LiteEntitySystem.EntityManager.MaxHistorySize
  commentId: F:LiteEntitySystem.EntityManager.MaxHistorySize
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_MaxHistorySize
  name: MaxHistorySize
  nameWithType: EntityManager.MaxHistorySize
  fullName: LiteEntitySystem.EntityManager.MaxHistorySize
- uid: LiteEntitySystem.EntityManager.PlayerId
  commentId: P:LiteEntitySystem.EntityManager.PlayerId
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_PlayerId
  name: PlayerId
  nameWithType: EntityManager.PlayerId
  fullName: LiteEntitySystem.EntityManager.PlayerId
- uid: LiteEntitySystem.EntityManager.HeaderByte
  commentId: F:LiteEntitySystem.EntityManager.HeaderByte
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_HeaderByte
  name: HeaderByte
  nameWithType: EntityManager.HeaderByte
  fullName: LiteEntitySystem.EntityManager.HeaderByte
- uid: LiteEntitySystem.EntityManager.InRollBackState
  commentId: P:LiteEntitySystem.EntityManager.InRollBackState
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_InRollBackState
  name: InRollBackState
  nameWithType: EntityManager.InRollBackState
  fullName: LiteEntitySystem.EntityManager.InRollBackState
- uid: LiteEntitySystem.EntityManager.InNormalState
  commentId: P:LiteEntitySystem.EntityManager.InNormalState
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_InNormalState
  name: InNormalState
  nameWithType: EntityManager.InNormalState
  fullName: LiteEntitySystem.EntityManager.InNormalState
- uid: LiteEntitySystem.EntityManager.VisualDeltaTime
  commentId: P:LiteEntitySystem.EntityManager.VisualDeltaTime
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_VisualDeltaTime
  name: VisualDeltaTime
  nameWithType: EntityManager.VisualDeltaTime
  fullName: LiteEntitySystem.EntityManager.VisualDeltaTime
- uid: LiteEntitySystem.EntityManager.VisualDeltaTimeF
  commentId: P:LiteEntitySystem.EntityManager.VisualDeltaTimeF
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_VisualDeltaTimeF
  name: VisualDeltaTimeF
  nameWithType: EntityManager.VisualDeltaTimeF
  fullName: LiteEntitySystem.EntityManager.VisualDeltaTimeF
- uid: LiteEntitySystem.EntityManager.MaxPlayers
  commentId: F:LiteEntitySystem.EntityManager.MaxPlayers
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_MaxPlayers
  name: MaxPlayers
  nameWithType: EntityManager.MaxPlayers
  fullName: LiteEntitySystem.EntityManager.MaxPlayers
- uid: LiteEntitySystem.EntityManager.IsRunning
  commentId: P:LiteEntitySystem.EntityManager.IsRunning
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_IsRunning
  name: IsRunning
  nameWithType: EntityManager.IsRunning
  fullName: LiteEntitySystem.EntityManager.IsRunning
- uid: LiteEntitySystem.EntityManager.IsLagCompensationEnabled
  commentId: P:LiteEntitySystem.EntityManager.IsLagCompensationEnabled
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_IsLagCompensationEnabled
  name: IsLagCompensationEnabled
  nameWithType: EntityManager.IsLagCompensationEnabled
  fullName: LiteEntitySystem.EntityManager.IsLagCompensationEnabled
- uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{{T}})
  commentId: M:LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
  parent: LiteEntitySystem.EntityManager
  definition: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  name: RegisterFieldType<T>(InterpolatorDelegateWithReturn<T>)
  nameWithType: EntityManager.RegisterFieldType<T>(InterpolatorDelegateWithReturn<T>)
  fullName: LiteEntitySystem.EntityManager.RegisterFieldType<T>(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn<T>)
  nameWithType.vb: EntityManager.RegisterFieldType(Of T)(InterpolatorDelegateWithReturn(Of T))
  fullName.vb: LiteEntitySystem.EntityManager.RegisterFieldType(Of T)(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn(Of T))
  name.vb: RegisterFieldType(Of T)(InterpolatorDelegateWithReturn(Of T))
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: LiteEntitySystem.Internal.InterpolatorDelegateWithReturn`1
    name: InterpolatorDelegateWithReturn
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: LiteEntitySystem.Internal.InterpolatorDelegateWithReturn`1
    name: InterpolatorDelegateWithReturn
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: LiteEntitySystem.EntityManager.RegisterFieldType``1
  commentId: M:LiteEntitySystem.EntityManager.RegisterFieldType``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1
  name: RegisterFieldType<T>()
  nameWithType: EntityManager.RegisterFieldType<T>()
  fullName: LiteEntitySystem.EntityManager.RegisterFieldType<T>()
  nameWithType.vb: EntityManager.RegisterFieldType(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.RegisterFieldType(Of T)()
  name.vb: RegisterFieldType(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(System.UInt16)
  commentId: M:LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(System.UInt16)
  parent: LiteEntitySystem.EntityManager
  isExternal: true
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityTypeFromClassId_System_UInt16_
  name: GetEntityTypeFromClassId(ushort)
  nameWithType: EntityManager.GetEntityTypeFromClassId(ushort)
  fullName: LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(ushort)
  nameWithType.vb: EntityManager.GetEntityTypeFromClassId(UShort)
  fullName.vb: LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(UShort)
  name.vb: GetEntityTypeFromClassId(UShort)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(System.UInt16)
    name: GetEntityTypeFromClassId
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityTypeFromClassId_System_UInt16_
  - name: (
  - uid: System.UInt16
    name: ushort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetEntityTypeFromClassId(System.UInt16)
    name: GetEntityTypeFromClassId
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityTypeFromClassId_System_UInt16_
  - name: (
  - uid: System.UInt16
    name: UShort
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.uint16
  - name: )
- uid: LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity,LiteEntitySystem.IEntitySyncVarInfoPrinter)
  commentId: M:LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity,LiteEntitySystem.IEntitySyncVarInfoPrinter)
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntitySyncVarInfo_LiteEntitySystem_Internal_InternalEntity_LiteEntitySystem_IEntitySyncVarInfoPrinter_
  name: GetEntitySyncVarInfo(InternalEntity, IEntitySyncVarInfoPrinter)
  nameWithType: EntityManager.GetEntitySyncVarInfo(InternalEntity, IEntitySyncVarInfoPrinter)
  fullName: LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity, LiteEntitySystem.IEntitySyncVarInfoPrinter)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity,LiteEntitySystem.IEntitySyncVarInfoPrinter)
    name: GetEntitySyncVarInfo
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntitySyncVarInfo_LiteEntitySystem_Internal_InternalEntity_LiteEntitySystem_IEntitySyncVarInfoPrinter_
  - name: (
  - uid: LiteEntitySystem.Internal.InternalEntity
    name: InternalEntity
    href: LiteEntitySystem.Internal.InternalEntity.html
  - name: ','
  - name: " "
  - uid: LiteEntitySystem.IEntitySyncVarInfoPrinter
    name: IEntitySyncVarInfoPrinter
    href: LiteEntitySystem.IEntitySyncVarInfoPrinter.html
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetEntitySyncVarInfo(LiteEntitySystem.Internal.InternalEntity,LiteEntitySystem.IEntitySyncVarInfoPrinter)
    name: GetEntitySyncVarInfo
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntitySyncVarInfo_LiteEntitySystem_Internal_InternalEntity_LiteEntitySystem_IEntitySyncVarInfoPrinter_
  - name: (
  - uid: LiteEntitySystem.Internal.InternalEntity
    name: InternalEntity
    href: LiteEntitySystem.Internal.InternalEntity.html
  - name: ','
  - name: " "
  - uid: LiteEntitySystem.IEntitySyncVarInfoPrinter
    name: IEntitySyncVarInfoPrinter
    href: LiteEntitySystem.IEntitySyncVarInfoPrinter.html
  - name: )
- uid: LiteEntitySystem.EntityManager.GetEntityById``1(LiteEntitySystem.EntitySharedReference)
  commentId: M:LiteEntitySystem.EntityManager.GetEntityById``1(LiteEntitySystem.EntitySharedReference)
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityById__1_LiteEntitySystem_EntitySharedReference_
  name: GetEntityById<T>(EntitySharedReference)
  nameWithType: EntityManager.GetEntityById<T>(EntitySharedReference)
  fullName: LiteEntitySystem.EntityManager.GetEntityById<T>(LiteEntitySystem.EntitySharedReference)
  nameWithType.vb: EntityManager.GetEntityById(Of T)(EntitySharedReference)
  fullName.vb: LiteEntitySystem.EntityManager.GetEntityById(Of T)(LiteEntitySystem.EntitySharedReference)
  name.vb: GetEntityById(Of T)(EntitySharedReference)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetEntityById``1(LiteEntitySystem.EntitySharedReference)
    name: GetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityById__1_LiteEntitySystem_EntitySharedReference_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetEntityById``1(LiteEntitySystem.EntitySharedReference)
    name: GetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntityById__1_LiteEntitySystem_EntitySharedReference_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,{T}@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
  parent: LiteEntitySystem.EntityManager
  definition: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  name: TryGetEntityById<T>(EntitySharedReference, out T)
  nameWithType: EntityManager.TryGetEntityById<T>(EntitySharedReference, out T)
  fullName: LiteEntitySystem.EntityManager.TryGetEntityById<T>(LiteEntitySystem.EntitySharedReference, out T)
  nameWithType.vb: EntityManager.TryGetEntityById(Of T)(EntitySharedReference, T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetEntityById(Of T)(LiteEntitySystem.EntitySharedReference, T)
  name.vb: TryGetEntityById(Of T)(EntitySharedReference, T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
    name: TryGetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
    name: TryGetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.GetEntities``1
  commentId: M:LiteEntitySystem.EntityManager.GetEntities``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntities__1
  name: GetEntities<T>()
  nameWithType: EntityManager.GetEntities<T>()
  fullName: LiteEntitySystem.EntityManager.GetEntities<T>()
  nameWithType.vb: EntityManager.GetEntities(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.GetEntities(Of T)()
  name.vb: GetEntities(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetEntities``1
    name: GetEntities
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntities__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetEntities``1
    name: GetEntities
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetEntities__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.GetControllers``1
  commentId: M:LiteEntitySystem.EntityManager.GetControllers``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetControllers__1
  name: GetControllers<T>()
  nameWithType: EntityManager.GetControllers<T>()
  fullName: LiteEntitySystem.EntityManager.GetControllers<T>()
  nameWithType.vb: EntityManager.GetControllers(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.GetControllers(Of T)()
  name.vb: GetControllers(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetControllers``1
    name: GetControllers
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetControllers__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetControllers``1
    name: GetControllers
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetControllers__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.GetSingleton``1
  commentId: M:LiteEntitySystem.EntityManager.GetSingleton``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetSingleton__1
  name: GetSingleton<T>()
  nameWithType: EntityManager.GetSingleton<T>()
  fullName: LiteEntitySystem.EntityManager.GetSingleton<T>()
  nameWithType.vb: EntityManager.GetSingleton(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.GetSingleton(Of T)()
  name.vb: GetSingleton(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetSingleton``1
    name: GetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetSingleton__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetSingleton``1
    name: GetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetSingleton__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.HasSingleton``1
  commentId: M:LiteEntitySystem.EntityManager.HasSingleton``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_HasSingleton__1
  name: HasSingleton<T>()
  nameWithType: EntityManager.HasSingleton<T>()
  fullName: LiteEntitySystem.EntityManager.HasSingleton<T>()
  nameWithType.vb: EntityManager.HasSingleton(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.HasSingleton(Of T)()
  name.vb: HasSingleton(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.HasSingleton``1
    name: HasSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_HasSingleton__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.HasSingleton``1
    name: HasSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_HasSingleton__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1({T})
  commentId: M:LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
  parent: LiteEntitySystem.EntityManager
  definition: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  name: AddLocalSingleton<T>(T)
  nameWithType: EntityManager.AddLocalSingleton<T>(T)
  fullName: LiteEntitySystem.EntityManager.AddLocalSingleton<T>(T)
  nameWithType.vb: EntityManager.AddLocalSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.AddLocalSingleton(Of T)(T)
  name.vb: AddLocalSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
    name: AddLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
    name: AddLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.GetLocalSingleton``1
  commentId: M:LiteEntitySystem.EntityManager.GetLocalSingleton``1
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetLocalSingleton__1
  name: GetLocalSingleton<T>()
  nameWithType: EntityManager.GetLocalSingleton<T>()
  fullName: LiteEntitySystem.EntityManager.GetLocalSingleton<T>()
  nameWithType.vb: EntityManager.GetLocalSingleton(Of T)()
  fullName.vb: LiteEntitySystem.EntityManager.GetLocalSingleton(Of T)()
  name.vb: GetLocalSingleton(Of T)()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.GetLocalSingleton``1
    name: GetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetLocalSingleton__1
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.GetLocalSingleton``1
    name: GetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_GetLocalSingleton__1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1({T}@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
  parent: LiteEntitySystem.EntityManager
  definition: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  name: TryGetLocalSingleton<T>(out T)
  nameWithType: EntityManager.TryGetLocalSingleton<T>(out T)
  fullName: LiteEntitySystem.EntityManager.TryGetLocalSingleton<T>(out T)
  nameWithType.vb: EntityManager.TryGetLocalSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetLocalSingleton(Of T)(T)
  name.vb: TryGetLocalSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
    name: TryGetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
    name: TryGetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetSingleton``1({T}@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
  parent: LiteEntitySystem.EntityManager
  definition: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  name: TryGetSingleton<T>(out T)
  nameWithType: EntityManager.TryGetSingleton<T>(out T)
  fullName: LiteEntitySystem.EntityManager.TryGetSingleton<T>(out T)
  nameWithType.vb: EntityManager.TryGetSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetSingleton(Of T)(T)
  name.vb: TryGetSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
    name: TryGetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
    name: TryGetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
  commentId: M:LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_EnableLagCompensation_LiteEntitySystem_NetPlayer_
  name: EnableLagCompensation(NetPlayer)
  nameWithType: EntityManager.EnableLagCompensation(NetPlayer)
  fullName: LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
    name: EnableLagCompensation
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_EnableLagCompensation_LiteEntitySystem_NetPlayer_
  - name: (
  - uid: LiteEntitySystem.NetPlayer
    name: NetPlayer
    href: LiteEntitySystem.NetPlayer.html
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.EnableLagCompensation(LiteEntitySystem.NetPlayer)
    name: EnableLagCompensation
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_EnableLagCompensation_LiteEntitySystem_NetPlayer_
  - name: (
  - uid: LiteEntitySystem.NetPlayer
    name: NetPlayer
    href: LiteEntitySystem.NetPlayer.html
  - name: )
- uid: LiteEntitySystem.EntityManager.DisableLagCompensation
  commentId: M:LiteEntitySystem.EntityManager.DisableLagCompensation
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_DisableLagCompensation
  name: DisableLagCompensation()
  nameWithType: EntityManager.DisableLagCompensation()
  fullName: LiteEntitySystem.EntityManager.DisableLagCompensation()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.DisableLagCompensation
    name: DisableLagCompensation
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_DisableLagCompensation
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.DisableLagCompensation
    name: DisableLagCompensation
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_DisableLagCompensation
  - name: (
  - name: )
- uid: LiteEntitySystem.EntityManager.Update
  commentId: M:LiteEntitySystem.EntityManager.Update
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Update
  name: Update()
  nameWithType: EntityManager.Update()
  fullName: LiteEntitySystem.EntityManager.Update()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.Update
    name: Update
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Update
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.Update
    name: Update
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Update
  - name: (
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
  commentId: M:LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  name: RegisterFieldType<T>(InterpolatorDelegateWithReturn<T>)
  nameWithType: EntityManager.RegisterFieldType<T>(InterpolatorDelegateWithReturn<T>)
  fullName: LiteEntitySystem.EntityManager.RegisterFieldType<T>(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn<T>)
  nameWithType.vb: EntityManager.RegisterFieldType(Of T)(InterpolatorDelegateWithReturn(Of T))
  fullName.vb: LiteEntitySystem.EntityManager.RegisterFieldType(Of T)(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn(Of T))
  name.vb: RegisterFieldType(Of T)(InterpolatorDelegateWithReturn(Of T))
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: LiteEntitySystem.Internal.InterpolatorDelegateWithReturn`1
    name: InterpolatorDelegateWithReturn
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.RegisterFieldType``1(LiteEntitySystem.Internal.InterpolatorDelegateWithReturn{``0})
    name: RegisterFieldType
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_RegisterFieldType__1_LiteEntitySystem_Internal_InterpolatorDelegateWithReturn___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: LiteEntitySystem.Internal.InterpolatorDelegateWithReturn`1
    name: InterpolatorDelegateWithReturn
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  name: TryGetEntityById<T>(EntitySharedReference, out T)
  nameWithType: EntityManager.TryGetEntityById<T>(EntitySharedReference, out T)
  fullName: LiteEntitySystem.EntityManager.TryGetEntityById<T>(LiteEntitySystem.EntitySharedReference, out T)
  nameWithType.vb: EntityManager.TryGetEntityById(Of T)(EntitySharedReference, T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetEntityById(Of T)(LiteEntitySystem.EntitySharedReference, T)
  name.vb: TryGetEntityById(Of T)(EntitySharedReference, T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
    name: TryGetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: ','
  - name: " "
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetEntityById``1(LiteEntitySystem.EntitySharedReference,``0@)
    name: TryGetEntityById
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetEntityById__1_LiteEntitySystem_EntitySharedReference___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - uid: LiteEntitySystem.EntitySharedReference
    name: EntitySharedReference
    href: LiteEntitySystem.EntitySharedReference.html
  - name: ','
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
  commentId: M:LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  name: AddLocalSingleton<T>(T)
  nameWithType: EntityManager.AddLocalSingleton<T>(T)
  fullName: LiteEntitySystem.EntityManager.AddLocalSingleton<T>(T)
  nameWithType.vb: EntityManager.AddLocalSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.AddLocalSingleton(Of T)(T)
  name.vb: AddLocalSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
    name: AddLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.AddLocalSingleton``1(``0)
    name: AddLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_AddLocalSingleton__1___0_
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  name: TryGetLocalSingleton<T>(out T)
  nameWithType: EntityManager.TryGetLocalSingleton<T>(out T)
  fullName: LiteEntitySystem.EntityManager.TryGetLocalSingleton<T>(out T)
  nameWithType.vb: EntityManager.TryGetLocalSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetLocalSingleton(Of T)(T)
  name.vb: TryGetLocalSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
    name: TryGetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetLocalSingleton``1(``0@)
    name: TryGetLocalSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetLocalSingleton__1___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
  commentId: M:LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  name: TryGetSingleton<T>(out T)
  nameWithType: EntityManager.TryGetSingleton<T>(out T)
  fullName: LiteEntitySystem.EntityManager.TryGetSingleton<T>(out T)
  nameWithType.vb: EntityManager.TryGetSingleton(Of T)(T)
  fullName.vb: LiteEntitySystem.EntityManager.TryGetSingleton(Of T)(T)
  name.vb: TryGetSingleton(Of T)(T)
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
    name: TryGetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  - name: <
  - name: T
  - name: '>'
  - name: (
  - name: out
  - name: " "
  - name: T
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.TryGetSingleton``1(``0@)
    name: TryGetSingleton
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_TryGetSingleton__1___0__
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: (
  - name: T
  - name: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: LiteEntitySystem.ServerEntityManager.PlayersCount*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.PlayersCount
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_PlayersCount
  name: PlayersCount
  nameWithType: ServerEntityManager.PlayersCount
  fullName: LiteEntitySystem.ServerEntityManager.PlayersCount
- uid: LiteEntitySystem.ServerSendRate
  commentId: T:LiteEntitySystem.ServerSendRate
  parent: LiteEntitySystem
  href: LiteEntitySystem.ServerSendRate.html
  name: ServerSendRate
  nameWithType: ServerSendRate
  fullName: LiteEntitySystem.ServerSendRate
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LiteEntitySystem.ServerEntityManager.#ctor*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.#ctor
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager__ctor_LiteEntitySystem_EntityTypesMap_System_Byte_System_Byte_LiteEntitySystem_ServerSendRate_LiteEntitySystem_MaxHistorySize_
  name: ServerEntityManager
  nameWithType: ServerEntityManager.ServerEntityManager
  fullName: LiteEntitySystem.ServerEntityManager.ServerEntityManager
  nameWithType.vb: ServerEntityManager.New
  fullName.vb: LiteEntitySystem.ServerEntityManager.New
  name.vb: New
- uid: LiteEntitySystem.EntityTypesMap
  commentId: T:LiteEntitySystem.EntityTypesMap
  parent: LiteEntitySystem
  href: LiteEntitySystem.EntityTypesMap.html
  name: EntityTypesMap
  nameWithType: EntityTypesMap
  fullName: LiteEntitySystem.EntityTypesMap
- uid: System.Byte
  commentId: T:System.Byte
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.byte
  name: byte
  nameWithType: byte
  fullName: byte
  nameWithType.vb: Byte
  fullName.vb: Byte
  name.vb: Byte
- uid: LiteEntitySystem.MaxHistorySize
  commentId: T:LiteEntitySystem.MaxHistorySize
  parent: LiteEntitySystem
  href: LiteEntitySystem.MaxHistorySize.html
  name: MaxHistorySize
  nameWithType: MaxHistorySize
  fullName: LiteEntitySystem.MaxHistorySize
- uid: LiteEntitySystem.EntityManager.Reset
  commentId: M:LiteEntitySystem.EntityManager.Reset
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Reset
  name: Reset()
  nameWithType: EntityManager.Reset()
  fullName: LiteEntitySystem.EntityManager.Reset()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.Reset
    name: Reset
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Reset
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.Reset
    name: Reset
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_Reset
  - name: (
  - name: )
- uid: LiteEntitySystem.ServerEntityManager.Reset*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.Reset
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_Reset
  name: Reset
  nameWithType: ServerEntityManager.Reset
  fullName: LiteEntitySystem.ServerEntityManager.Reset
- uid: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.ToggleSyncGroup
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_ToggleSyncGroup_System_Byte_LiteEntitySystem_EntityLogic_LiteEntitySystem_SyncGroup_System_Boolean_
  name: ToggleSyncGroup
  nameWithType: ServerEntityManager.ToggleSyncGroup
  fullName: LiteEntitySystem.ServerEntityManager.ToggleSyncGroup
- uid: LiteEntitySystem.EntityLogic
  commentId: T:LiteEntitySystem.EntityLogic
  parent: LiteEntitySystem
  href: LiteEntitySystem.EntityLogic.html
  name: EntityLogic
  nameWithType: EntityLogic
  fullName: LiteEntitySystem.EntityLogic
- uid: LiteEntitySystem.SyncGroup
  commentId: T:LiteEntitySystem.SyncGroup
  parent: LiteEntitySystem
  href: LiteEntitySystem.SyncGroup.html
  name: SyncGroup
  nameWithType: SyncGroup
  fullName: LiteEntitySystem.SyncGroup
- uid: LiteEntitySystem.NetPlayer
  commentId: T:LiteEntitySystem.NetPlayer
  parent: LiteEntitySystem
  href: LiteEntitySystem.NetPlayer.html
  name: NetPlayer
  nameWithType: NetPlayer
  fullName: LiteEntitySystem.NetPlayer
- uid: LiteEntitySystem.ServerEntityManager.AddPlayer*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.AddPlayer
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddPlayer_LiteEntitySystem_Transport_AbstractNetPeer_
  name: AddPlayer
  nameWithType: ServerEntityManager.AddPlayer
  fullName: LiteEntitySystem.ServerEntityManager.AddPlayer
- uid: LiteEntitySystem.Transport.AbstractNetPeer
  commentId: T:LiteEntitySystem.Transport.AbstractNetPeer
  parent: LiteEntitySystem.Transport
  href: LiteEntitySystem.Transport.AbstractNetPeer.html
  name: AbstractNetPeer
  nameWithType: AbstractNetPeer
  fullName: LiteEntitySystem.Transport.AbstractNetPeer
- uid: LiteEntitySystem.Transport
  commentId: N:LiteEntitySystem.Transport
  href: LiteEntitySystem.html
  name: LiteEntitySystem.Transport
  nameWithType: LiteEntitySystem.Transport
  fullName: LiteEntitySystem.Transport
  spec.csharp:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Transport
    name: Transport
    href: LiteEntitySystem.Transport.html
  spec.vb:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Transport
    name: Transport
    href: LiteEntitySystem.Transport.html
- uid: LiteEntitySystem.ServerEntityManager.GetPlayer*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.GetPlayer
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_GetPlayer_System_Byte_
  name: GetPlayer
  nameWithType: ServerEntityManager.GetPlayer
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayer
- uid: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  commentId: M:LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddPlayer_LiteEntitySystem_Transport_AbstractNetPeer_
  name: AddPlayer(AbstractNetPeer)
  nameWithType: ServerEntityManager.AddPlayer(AbstractNetPeer)
  fullName: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
  spec.csharp:
  - uid: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
    name: AddPlayer
    href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddPlayer_LiteEntitySystem_Transport_AbstractNetPeer_
  - name: (
  - uid: LiteEntitySystem.Transport.AbstractNetPeer
    name: AbstractNetPeer
    href: LiteEntitySystem.Transport.AbstractNetPeer.html
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.ServerEntityManager.AddPlayer(LiteEntitySystem.Transport.AbstractNetPeer)
    name: AddPlayer
    href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddPlayer_LiteEntitySystem_Transport_AbstractNetPeer_
  - name: (
  - uid: LiteEntitySystem.Transport.AbstractNetPeer
    name: AbstractNetPeer
    href: LiteEntitySystem.Transport.AbstractNetPeer.html
  - name: )
- uid: LiteEntitySystem.ServerEntityManager.RemovePlayer*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.RemovePlayer
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_RemovePlayer_LiteEntitySystem_Transport_AbstractNetPeer_
  name: RemovePlayer
  nameWithType: ServerEntityManager.RemovePlayer
  fullName: LiteEntitySystem.ServerEntityManager.RemovePlayer
- uid: LiteEntitySystem.ServerEntityManager.GetPlayerController*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.GetPlayerController
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_GetPlayerController_LiteEntitySystem_Transport_AbstractNetPeer_
  name: GetPlayerController
  nameWithType: ServerEntityManager.GetPlayerController
  fullName: LiteEntitySystem.ServerEntityManager.GetPlayerController
- uid: LiteEntitySystem.HumanControllerLogic
  commentId: T:LiteEntitySystem.HumanControllerLogic
  parent: LiteEntitySystem
  href: LiteEntitySystem.HumanControllerLogic.html
  name: HumanControllerLogic
  nameWithType: HumanControllerLogic
  fullName: LiteEntitySystem.HumanControllerLogic
- uid: LiteEntitySystem.ServerEntityManager.AddController*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.AddController
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddController__1_LiteEntitySystem_NetPlayer_System_Action___0__
  name: AddController
  nameWithType: ServerEntityManager.AddController
  fullName: LiteEntitySystem.ServerEntityManager.AddController
- uid: System.Action{{T}}
  commentId: T:System.Action{`0}
  parent: System
  definition: System.Action`1
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: System.Action`1
  commentId: T:System.Action`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.action-1
  name: Action<T>
  nameWithType: Action<T>
  fullName: System.Action<T>
  nameWithType.vb: Action(Of T)
  fullName.vb: System.Action(Of T)
  name.vb: Action(Of T)
  spec.csharp:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Action`1
    name: Action
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.action-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: LiteEntitySystem.PawnLogic
  commentId: T:LiteEntitySystem.PawnLogic
  parent: LiteEntitySystem
  href: LiteEntitySystem.PawnLogic.html
  name: PawnLogic
  nameWithType: PawnLogic
  fullName: LiteEntitySystem.PawnLogic
- uid: LiteEntitySystem.ServerEntityManager.AddAIController*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.AddAIController
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddAIController__1_System_Action___0__
  name: AddAIController
  nameWithType: ServerEntityManager.AddAIController
  fullName: LiteEntitySystem.ServerEntityManager.AddAIController
- uid: LiteEntitySystem.ServerEntityManager.AddSingleton*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.AddSingleton
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddSingleton__1_System_Action___0__
  name: AddSingleton
  nameWithType: ServerEntityManager.AddSingleton
  fullName: LiteEntitySystem.ServerEntityManager.AddSingleton
- uid: LiteEntitySystem.ServerEntityManager.AddEntity*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.AddEntity
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_AddEntity__1_System_Action___0__
  name: AddEntity
  nameWithType: ServerEntityManager.AddEntity
  fullName: LiteEntitySystem.ServerEntityManager.AddEntity
- uid: LiteEntitySystem.ServerEntityManager.Deserialize*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.Deserialize
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_Deserialize_LiteEntitySystem_Transport_AbstractNetPeer_System_ReadOnlySpan_System_Byte__
  name: Deserialize
  nameWithType: ServerEntityManager.Deserialize
  fullName: LiteEntitySystem.ServerEntityManager.Deserialize
- uid: System.ReadOnlySpan{System.Byte}
  commentId: T:System.ReadOnlySpan{System.Byte}
  parent: System
  definition: System.ReadOnlySpan`1
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<byte>
  nameWithType: ReadOnlySpan<byte>
  fullName: System.ReadOnlySpan<byte>
  nameWithType.vb: ReadOnlySpan(Of Byte)
  fullName.vb: System.ReadOnlySpan(Of Byte)
  name.vb: ReadOnlySpan(Of Byte)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - uid: System.Byte
    name: byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - uid: System.Byte
    name: Byte
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.byte
  - name: )
- uid: LiteEntitySystem.DeserializeResult
  commentId: T:LiteEntitySystem.DeserializeResult
  parent: LiteEntitySystem
  href: LiteEntitySystem.DeserializeResult.html
  name: DeserializeResult
  nameWithType: DeserializeResult
  fullName: LiteEntitySystem.DeserializeResult
- uid: System.ReadOnlySpan`1
  commentId: T:System.ReadOnlySpan`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  name: ReadOnlySpan<T>
  nameWithType: ReadOnlySpan<T>
  fullName: System.ReadOnlySpan<T>
  nameWithType.vb: ReadOnlySpan(Of T)
  fullName.vb: System.ReadOnlySpan(Of T)
  name.vb: ReadOnlySpan(Of T)
  spec.csharp:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.ReadOnlySpan`1
    name: ReadOnlySpan
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.readonlyspan-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.EntityManager.OnLogicTick
  commentId: M:LiteEntitySystem.EntityManager.OnLogicTick
  parent: LiteEntitySystem.EntityManager
  href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_OnLogicTick
  name: OnLogicTick()
  nameWithType: EntityManager.OnLogicTick()
  fullName: LiteEntitySystem.EntityManager.OnLogicTick()
  spec.csharp:
  - uid: LiteEntitySystem.EntityManager.OnLogicTick
    name: OnLogicTick
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_OnLogicTick
  - name: (
  - name: )
  spec.vb:
  - uid: LiteEntitySystem.EntityManager.OnLogicTick
    name: OnLogicTick
    href: LiteEntitySystem.EntityManager.html#LiteEntitySystem_EntityManager_OnLogicTick
  - name: (
  - name: )
- uid: LiteEntitySystem.ServerEntityManager.OnLogicTick*
  commentId: Overload:LiteEntitySystem.ServerEntityManager.OnLogicTick
  href: LiteEntitySystem.ServerEntityManager.html#LiteEntitySystem_ServerEntityManager_OnLogicTick
  name: OnLogicTick
  nameWithType: ServerEntityManager.OnLogicTick
  fullName: LiteEntitySystem.ServerEntityManager.OnLogicTick
