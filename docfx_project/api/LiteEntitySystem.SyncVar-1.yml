### YamlMime:ManagedReference
items:
- uid: LiteEntitySystem.SyncVar`1
  commentId: T:LiteEntitySystem.SyncVar`1
  id: SyncVar`1
  parent: LiteEntitySystem
  children:
  - LiteEntitySystem.SyncVar`1.Equals(LiteEntitySystem.SyncVar{`0})
  - LiteEntitySystem.SyncVar`1.Equals(System.Object)
  - LiteEntitySystem.SyncVar`1.Equals(`0)
  - LiteEntitySystem.SyncVar`1.GetHashCode
  - LiteEntitySystem.SyncVar`1.InterpolatedValue
  - LiteEntitySystem.SyncVar`1.ToString
  - LiteEntitySystem.SyncVar`1.Value
  - LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  - LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},`0)
  - LiteEntitySystem.SyncVar`1.op_Equality(`0,LiteEntitySystem.SyncVar{`0})
  - LiteEntitySystem.SyncVar`1.op_Implicit(LiteEntitySystem.SyncVar{`0})~`0
  - LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  - LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},`0)
  - LiteEntitySystem.SyncVar`1.op_Inequality(`0,LiteEntitySystem.SyncVar{`0})
  langs:
  - csharp
  - vb
  name: SyncVar<T>
  nameWithType: SyncVar<T>
  fullName: LiteEntitySystem.SyncVar<T>
  type: Struct
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: 'public struct SyncVar<T> : ISyncVar<T>, IEquatable<T>, IEquatable<SyncVar<T>> where T : unmanaged'
    typeParameters:
    - id: T
    content.vb: Public Structure SyncVar(Of T As Structure) Implements ISyncVar(Of T), IEquatable(Of T), IEquatable(Of SyncVar(Of T))
  implements:
  - LiteEntitySystem.Internal.ISyncVar{{T}}
  - System.IEquatable{{T}}
  - System.IEquatable{LiteEntitySystem.SyncVar`1}
  nameWithType.vb: SyncVar(Of T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T)
  name.vb: SyncVar(Of T)
- uid: LiteEntitySystem.SyncVar`1.InterpolatedValue
  commentId: P:LiteEntitySystem.SyncVar`1.InterpolatedValue
  id: InterpolatedValue
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: InterpolatedValue
  nameWithType: SyncVar<T>.InterpolatedValue
  fullName: LiteEntitySystem.SyncVar<T>.InterpolatedValue
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public T InterpolatedValue { get; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public ReadOnly Property InterpolatedValue As T
  overload: LiteEntitySystem.SyncVar`1.InterpolatedValue*
  nameWithType.vb: SyncVar(Of T).InterpolatedValue
  fullName.vb: LiteEntitySystem.SyncVar(Of T).InterpolatedValue
- uid: LiteEntitySystem.SyncVar`1.Value
  commentId: P:LiteEntitySystem.SyncVar`1.Value
  id: Value
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: Value
  nameWithType: SyncVar<T>.Value
  fullName: LiteEntitySystem.SyncVar<T>.Value
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public T Value { get; set; }
    parameters: []
    return:
      type: '{T}'
    content.vb: Public Property Value As T
  overload: LiteEntitySystem.SyncVar`1.Value*
  nameWithType.vb: SyncVar(Of T).Value
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Value
- uid: LiteEntitySystem.SyncVar`1.op_Implicit(LiteEntitySystem.SyncVar{`0})~`0
  commentId: M:LiteEntitySystem.SyncVar`1.op_Implicit(LiteEntitySystem.SyncVar{`0})~`0
  id: op_Implicit(LiteEntitySystem.SyncVar{`0})~`0
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: implicit operator T(SyncVar<T>)
  nameWithType: SyncVar<T>.implicit operator T(SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.implicit operator T(LiteEntitySystem.SyncVar<T>)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static implicit operator T(SyncVar<T> sv)
    parameters:
    - id: sv
      type: LiteEntitySystem.SyncVar`1
    return:
      type: '{T}'
    content.vb: Public Shared Widening Operator CType(sv As SyncVar(Of T)) As T
  overload: LiteEntitySystem.SyncVar`1.op_Implicit*
  nameWithType.vb: SyncVar(Of T).CType(SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).CType(LiteEntitySystem.SyncVar(Of T))
  name.vb: CType(SyncVar(Of T))
- uid: LiteEntitySystem.SyncVar`1.ToString
  commentId: M:LiteEntitySystem.SyncVar`1.ToString
  id: ToString
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: SyncVar<T>.ToString()
  fullName: LiteEntitySystem.SyncVar<T>.ToString()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Returns the fully qualified type name of this instance.
  example: []
  syntax:
    content: public override string ToString()
    return:
      type: System.String
      description: The fully qualified type name.
    content.vb: Public Overrides Function ToString() As String
  overridden: System.ValueType.ToString
  overload: LiteEntitySystem.SyncVar`1.ToString*
  nameWithType.vb: SyncVar(Of T).ToString()
  fullName.vb: LiteEntitySystem.SyncVar(Of T).ToString()
- uid: LiteEntitySystem.SyncVar`1.GetHashCode
  commentId: M:LiteEntitySystem.SyncVar`1.GetHashCode
  id: GetHashCode
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: SyncVar<T>.GetHashCode()
  fullName: LiteEntitySystem.SyncVar<T>.GetHashCode()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Returns the hash code for this instance.
  example: []
  syntax:
    content: public override int GetHashCode()
    return:
      type: System.Int32
      description: A 32-bit signed integer that is the hash code for this instance.
    content.vb: Public Overrides Function GetHashCode() As Integer
  overridden: System.ValueType.GetHashCode
  overload: LiteEntitySystem.SyncVar`1.GetHashCode*
  nameWithType.vb: SyncVar(Of T).GetHashCode()
  fullName.vb: LiteEntitySystem.SyncVar(Of T).GetHashCode()
- uid: LiteEntitySystem.SyncVar`1.Equals(System.Object)
  commentId: M:LiteEntitySystem.SyncVar`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: Equals(object)
  nameWithType: SyncVar<T>.Equals(object)
  fullName: LiteEntitySystem.SyncVar<T>.Equals(object)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Indicates whether this instance and a specified object are equal.
  example: []
  syntax:
    content: public override bool Equals(object o)
    parameters:
    - id: o
      type: System.Object
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if <code class="paramref">obj</code> and this instance are the same type and represent the same value; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Overrides Function Equals(o As Object) As Boolean
  overridden: System.ValueType.Equals(System.Object)
  overload: LiteEntitySystem.SyncVar`1.Equals*
  nameWithType.vb: SyncVar(Of T).Equals(Object)
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Equals(Object)
  name.vb: Equals(Object)
- uid: LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  commentId: M:LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  id: op_Equality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator ==(SyncVar<T>, SyncVar<T>)
  nameWithType: SyncVar<T>.operator ==(SyncVar<T>, SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.operator ==(LiteEntitySystem.SyncVar<T>, LiteEntitySystem.SyncVar<T>)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator ==(SyncVar<T> a, SyncVar<T> b)
    parameters:
    - id: a
      type: LiteEntitySystem.SyncVar`1
    - id: b
      type: LiteEntitySystem.SyncVar`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As SyncVar(Of T), b As SyncVar(Of T)) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Equality*
  nameWithType.vb: SyncVar(Of T).=(SyncVar(Of T), SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).=(LiteEntitySystem.SyncVar(Of T), LiteEntitySystem.SyncVar(Of T))
  name.vb: =(SyncVar(Of T), SyncVar(Of T))
- uid: LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  commentId: M:LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  id: op_Inequality(LiteEntitySystem.SyncVar{`0},LiteEntitySystem.SyncVar{`0})
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator !=(SyncVar<T>, SyncVar<T>)
  nameWithType: SyncVar<T>.operator !=(SyncVar<T>, SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.operator !=(LiteEntitySystem.SyncVar<T>, LiteEntitySystem.SyncVar<T>)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator !=(SyncVar<T> a, SyncVar<T> b)
    parameters:
    - id: a
      type: LiteEntitySystem.SyncVar`1
    - id: b
      type: LiteEntitySystem.SyncVar`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As SyncVar(Of T), b As SyncVar(Of T)) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Inequality*
  nameWithType.vb: SyncVar(Of T).<>(SyncVar(Of T), SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).<>(LiteEntitySystem.SyncVar(Of T), LiteEntitySystem.SyncVar(Of T))
  name.vb: <>(SyncVar(Of T), SyncVar(Of T))
- uid: LiteEntitySystem.SyncVar`1.op_Equality(`0,LiteEntitySystem.SyncVar{`0})
  commentId: M:LiteEntitySystem.SyncVar`1.op_Equality(`0,LiteEntitySystem.SyncVar{`0})
  id: op_Equality(`0,LiteEntitySystem.SyncVar{`0})
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator ==(T, SyncVar<T>)
  nameWithType: SyncVar<T>.operator ==(T, SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.operator ==(T, LiteEntitySystem.SyncVar<T>)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator ==(T a, SyncVar<T> b)
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: LiteEntitySystem.SyncVar`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As T, b As SyncVar(Of T)) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Equality*
  nameWithType.vb: SyncVar(Of T).=(T, SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).=(T, LiteEntitySystem.SyncVar(Of T))
  name.vb: =(T, SyncVar(Of T))
- uid: LiteEntitySystem.SyncVar`1.op_Inequality(`0,LiteEntitySystem.SyncVar{`0})
  commentId: M:LiteEntitySystem.SyncVar`1.op_Inequality(`0,LiteEntitySystem.SyncVar{`0})
  id: op_Inequality(`0,LiteEntitySystem.SyncVar{`0})
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator !=(T, SyncVar<T>)
  nameWithType: SyncVar<T>.operator !=(T, SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.operator !=(T, LiteEntitySystem.SyncVar<T>)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator !=(T a, SyncVar<T> b)
    parameters:
    - id: a
      type: '{T}'
    - id: b
      type: LiteEntitySystem.SyncVar`1
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As T, b As SyncVar(Of T)) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Inequality*
  nameWithType.vb: SyncVar(Of T).<>(T, SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).<>(T, LiteEntitySystem.SyncVar(Of T))
  name.vb: <>(T, SyncVar(Of T))
- uid: LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},`0)
  commentId: M:LiteEntitySystem.SyncVar`1.op_Equality(LiteEntitySystem.SyncVar{`0},`0)
  id: op_Equality(LiteEntitySystem.SyncVar{`0},`0)
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator ==(SyncVar<T>, T)
  nameWithType: SyncVar<T>.operator ==(SyncVar<T>, T)
  fullName: LiteEntitySystem.SyncVar<T>.operator ==(LiteEntitySystem.SyncVar<T>, T)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator ==(SyncVar<T> a, T b)
    parameters:
    - id: a
      type: LiteEntitySystem.SyncVar`1
    - id: b
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Shared Operator =(a As SyncVar(Of T), b As T) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Equality*
  nameWithType.vb: SyncVar(Of T).=(SyncVar(Of T), T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T).=(LiteEntitySystem.SyncVar(Of T), T)
  name.vb: =(SyncVar(Of T), T)
- uid: LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},`0)
  commentId: M:LiteEntitySystem.SyncVar`1.op_Inequality(LiteEntitySystem.SyncVar{`0},`0)
  id: op_Inequality(LiteEntitySystem.SyncVar{`0},`0)
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: operator !=(SyncVar<T>, T)
  nameWithType: SyncVar<T>.operator !=(SyncVar<T>, T)
  fullName: LiteEntitySystem.SyncVar<T>.operator !=(LiteEntitySystem.SyncVar<T>, T)
  type: Operator
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  syntax:
    content: public static bool operator !=(SyncVar<T> a, T b)
    parameters:
    - id: a
      type: LiteEntitySystem.SyncVar`1
    - id: b
      type: '{T}'
    return:
      type: System.Boolean
    content.vb: Public Shared Operator <>(a As SyncVar(Of T), b As T) As Boolean
  overload: LiteEntitySystem.SyncVar`1.op_Inequality*
  nameWithType.vb: SyncVar(Of T).<>(SyncVar(Of T), T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T).<>(LiteEntitySystem.SyncVar(Of T), T)
  name.vb: <>(SyncVar(Of T), T)
- uid: LiteEntitySystem.SyncVar`1.Equals(`0)
  commentId: M:LiteEntitySystem.SyncVar`1.Equals(`0)
  id: Equals(`0)
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: Equals(T)
  nameWithType: SyncVar<T>.Equals(T)
  fullName: LiteEntitySystem.SyncVar<T>.Equals(T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(T v)
    parameters:
    - id: v
      type: '{T}'
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(v As T) As Boolean
  overload: LiteEntitySystem.SyncVar`1.Equals*
  implements:
  - System.IEquatable{{T}}.Equals({T})
  nameWithType.vb: SyncVar(Of T).Equals(T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Equals(T)
- uid: LiteEntitySystem.SyncVar`1.Equals(LiteEntitySystem.SyncVar{`0})
  commentId: M:LiteEntitySystem.SyncVar`1.Equals(LiteEntitySystem.SyncVar{`0})
  id: Equals(LiteEntitySystem.SyncVar{`0})
  parent: LiteEntitySystem.SyncVar`1
  langs:
  - csharp
  - vb
  name: Equals(SyncVar<T>)
  nameWithType: SyncVar<T>.Equals(SyncVar<T>)
  fullName: LiteEntitySystem.SyncVar<T>.Equals(LiteEntitySystem.SyncVar<T>)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem
  summary: Indicates whether the current object is equal to another object of the same type.
  example: []
  syntax:
    content: public bool Equals(SyncVar<T> tv)
    parameters:
    - id: tv
      type: LiteEntitySystem.SyncVar`1
    return:
      type: System.Boolean
      description: <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">true</a> if the current object is equal to the <code class="paramref">other</code> parameter; otherwise, <a href="https://learn.microsoft.com/dotnet/csharp/language-reference/builtin-types/bool">false</a>.
    content.vb: Public Function Equals(tv As SyncVar(Of T)) As Boolean
  overload: LiteEntitySystem.SyncVar`1.Equals*
  implements:
  - System.IEquatable{LiteEntitySystem.SyncVar`1}.Equals(LiteEntitySystem.SyncVar{{T}})
  nameWithType.vb: SyncVar(Of T).Equals(SyncVar(Of T))
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Equals(LiteEntitySystem.SyncVar(Of T))
  name.vb: Equals(SyncVar(Of T))
references:
- uid: LiteEntitySystem
  commentId: N:LiteEntitySystem
  href: LiteEntitySystem.html
  name: LiteEntitySystem
  nameWithType: LiteEntitySystem
  fullName: LiteEntitySystem
- uid: LiteEntitySystem.Internal.ISyncVar{{T}}
  commentId: T:LiteEntitySystem.Internal.ISyncVar{`0}
  parent: LiteEntitySystem.Internal
  definition: LiteEntitySystem.Internal.ISyncVar`1
  name: ISyncVar<T>
  nameWithType: ISyncVar<T>
  fullName: LiteEntitySystem.Internal.ISyncVar<T>
  nameWithType.vb: ISyncVar(Of T)
  fullName.vb: LiteEntitySystem.Internal.ISyncVar(Of T)
  name.vb: ISyncVar(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.Internal.ISyncVar`1
    name: ISyncVar
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.Internal.ISyncVar`1
    name: ISyncVar
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IEquatable{{T}}
  commentId: T:System.IEquatable{`0}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.IEquatable{LiteEntitySystem.SyncVar`1}
  commentId: T:System.IEquatable{LiteEntitySystem.SyncVar`1}
  parent: System
  definition: System.IEquatable`1
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<SyncVar<T>>
  nameWithType: IEquatable<SyncVar<T>>
  fullName: System.IEquatable<LiteEntitySystem.SyncVar<T>>
  nameWithType.vb: IEquatable(Of SyncVar(Of T))
  fullName.vb: System.IEquatable(Of LiteEntitySystem.SyncVar(Of T))
  name.vb: IEquatable(Of SyncVar(Of T))
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: <
  - name: T
  - name: '>'
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
- uid: LiteEntitySystem.Internal.ISyncVar`1
  commentId: T:LiteEntitySystem.Internal.ISyncVar`1
  isExternal: true
  name: ISyncVar<T>
  nameWithType: ISyncVar<T>
  fullName: LiteEntitySystem.Internal.ISyncVar<T>
  nameWithType.vb: ISyncVar(Of T)
  fullName.vb: LiteEntitySystem.Internal.ISyncVar(Of T)
  name.vb: ISyncVar(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.Internal.ISyncVar`1
    name: ISyncVar
    isExternal: true
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.Internal.ISyncVar`1
    name: ISyncVar
    isExternal: true
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.Internal
  commentId: N:LiteEntitySystem.Internal
  href: LiteEntitySystem.html
  name: LiteEntitySystem.Internal
  nameWithType: LiteEntitySystem.Internal
  fullName: LiteEntitySystem.Internal
  spec.csharp:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Internal
    name: Internal
    href: LiteEntitySystem.Internal.html
  spec.vb:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Internal
    name: Internal
    href: LiteEntitySystem.Internal.html
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullName.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LiteEntitySystem.SyncVar`1.InterpolatedValue*
  commentId: Overload:LiteEntitySystem.SyncVar`1.InterpolatedValue
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_InterpolatedValue
  name: InterpolatedValue
  nameWithType: SyncVar<T>.InterpolatedValue
  fullName: LiteEntitySystem.SyncVar<T>.InterpolatedValue
  nameWithType.vb: SyncVar(Of T).InterpolatedValue
  fullName.vb: LiteEntitySystem.SyncVar(Of T).InterpolatedValue
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: LiteEntitySystem.SyncVar`1.Value*
  commentId: Overload:LiteEntitySystem.SyncVar`1.Value
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_Value
  name: Value
  nameWithType: SyncVar<T>.Value
  fullName: LiteEntitySystem.SyncVar<T>.Value
  nameWithType.vb: SyncVar(Of T).Value
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Value
- uid: LiteEntitySystem.SyncVar`1.op_Implicit*
  commentId: Overload:LiteEntitySystem.SyncVar`1.op_Implicit
  name: implicit operator
  nameWithType: SyncVar<T>.implicit operator
  fullName: LiteEntitySystem.SyncVar<T>.implicit operator
  nameWithType.vb: SyncVar(Of T).CType
  fullName.vb: LiteEntitySystem.SyncVar(Of T).CType
  name.vb: CType
  spec.csharp:
  - name: implicit
  - name: " "
  - name: operator
- uid: LiteEntitySystem.SyncVar`1
  commentId: T:LiteEntitySystem.SyncVar`1
  parent: LiteEntitySystem
  href: LiteEntitySystem.SyncVar-1.html
  name: SyncVar<T>
  nameWithType: SyncVar<T>
  fullName: LiteEntitySystem.SyncVar<T>
  nameWithType.vb: SyncVar(Of T)
  fullName.vb: LiteEntitySystem.SyncVar(Of T)
  name.vb: SyncVar(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.ValueType.ToString
  commentId: M:System.ValueType.ToString
  parent: System.ValueType
  isExternal: true
  name: ToString()
  nameWithType: ValueType.ToString()
  fullName: System.ValueType.ToString()
  spec.csharp:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.ToString
    name: ToString
    isExternal: true
  - name: (
  - name: )
- uid: LiteEntitySystem.SyncVar`1.ToString*
  commentId: Overload:LiteEntitySystem.SyncVar`1.ToString
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_ToString
  name: ToString
  nameWithType: SyncVar<T>.ToString
  fullName: LiteEntitySystem.SyncVar<T>.ToString
  nameWithType.vb: SyncVar(Of T).ToString
  fullName.vb: LiteEntitySystem.SyncVar(Of T).ToString
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.string
  name: string
  nameWithType: string
  fullName: string
  nameWithType.vb: String
  fullName.vb: String
  name.vb: String
- uid: System.ValueType
  commentId: T:System.ValueType
  parent: System
  isExternal: true
  name: ValueType
  nameWithType: ValueType
  fullName: System.ValueType
- uid: System.ValueType.GetHashCode
  commentId: M:System.ValueType.GetHashCode
  parent: System.ValueType
  isExternal: true
  name: GetHashCode()
  nameWithType: ValueType.GetHashCode()
  fullName: System.ValueType.GetHashCode()
  spec.csharp:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
  spec.vb:
  - uid: System.ValueType.GetHashCode
    name: GetHashCode
    isExternal: true
  - name: (
  - name: )
- uid: LiteEntitySystem.SyncVar`1.GetHashCode*
  commentId: Overload:LiteEntitySystem.SyncVar`1.GetHashCode
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_GetHashCode
  name: GetHashCode
  nameWithType: SyncVar<T>.GetHashCode
  fullName: LiteEntitySystem.SyncVar<T>.GetHashCode
  nameWithType.vb: SyncVar(Of T).GetHashCode
  fullName.vb: LiteEntitySystem.SyncVar(Of T).GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: System.ValueType.Equals(System.Object)
  commentId: M:System.ValueType.Equals(System.Object)
  parent: System.ValueType
  isExternal: true
  name: Equals(object)
  nameWithType: ValueType.Equals(object)
  fullName: System.ValueType.Equals(object)
  nameWithType.vb: ValueType.Equals(Object)
  fullName.vb: System.ValueType.Equals(Object)
  name.vb: Equals(Object)
  spec.csharp:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: object
    isExternal: true
  - name: )
  spec.vb:
  - uid: System.ValueType.Equals(System.Object)
    name: Equals
    isExternal: true
  - name: (
  - uid: System.Object
    name: Object
    isExternal: true
  - name: )
- uid: LiteEntitySystem.SyncVar`1.Equals*
  commentId: Overload:LiteEntitySystem.SyncVar`1.Equals
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_Equals_System_Object_
  name: Equals
  nameWithType: SyncVar<T>.Equals
  fullName: LiteEntitySystem.SyncVar<T>.Equals
  nameWithType.vb: SyncVar(Of T).Equals
  fullName.vb: LiteEntitySystem.SyncVar(Of T).Equals
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LiteEntitySystem.SyncVar`1.op_Equality*
  commentId: Overload:LiteEntitySystem.SyncVar`1.op_Equality
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_op_Equality_LiteEntitySystem_SyncVar__0__LiteEntitySystem_SyncVar__0__
  name: operator ==
  nameWithType: SyncVar<T>.operator ==
  fullName: LiteEntitySystem.SyncVar<T>.operator ==
  nameWithType.vb: SyncVar(Of T).=
  fullName.vb: LiteEntitySystem.SyncVar(Of T).=
  name.vb: =
  spec.csharp:
  - name: operator
  - name: " "
  - uid: LiteEntitySystem.SyncVar`1.op_Equality*
    name: ==
    href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_op_Equality_LiteEntitySystem_SyncVar__0__LiteEntitySystem_SyncVar__0__
- uid: LiteEntitySystem.SyncVar`1.op_Inequality*
  commentId: Overload:LiteEntitySystem.SyncVar`1.op_Inequality
  href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_op_Inequality_LiteEntitySystem_SyncVar__0__LiteEntitySystem_SyncVar__0__
  name: operator !=
  nameWithType: SyncVar<T>.operator !=
  fullName: LiteEntitySystem.SyncVar<T>.operator !=
  nameWithType.vb: SyncVar(Of T).<>
  fullName.vb: LiteEntitySystem.SyncVar(Of T).<>
  name.vb: <>
  spec.csharp:
  - name: operator
  - name: " "
  - uid: LiteEntitySystem.SyncVar`1.op_Inequality*
    name: '!='
    href: LiteEntitySystem.SyncVar-1.html#LiteEntitySystem_SyncVar_1_op_Inequality_LiteEntitySystem_SyncVar__0__LiteEntitySystem_SyncVar__0__
- uid: System.IEquatable{{T}}.Equals({T})
  commentId: M:System.IEquatable{`0}.Equals(`0)
  parent: System.IEquatable{{T}}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable{`0}.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable{`0}.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullName.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - name: T
  - name: )
- uid: System.IEquatable{LiteEntitySystem.SyncVar`1}.Equals(LiteEntitySystem.SyncVar{{T}})
  commentId: M:System.IEquatable{LiteEntitySystem.SyncVar`1}.Equals(LiteEntitySystem.SyncVar{`0})
  parent: System.IEquatable{LiteEntitySystem.SyncVar`1}
  definition: System.IEquatable`1.Equals(`0)
  href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  name: Equals(SyncVar<T>)
  nameWithType: IEquatable<SyncVar<T>>.Equals(SyncVar<T>)
  fullName: System.IEquatable<LiteEntitySystem.SyncVar<T>>.Equals(LiteEntitySystem.SyncVar<T>)
  nameWithType.vb: IEquatable(Of SyncVar(Of T)).Equals(SyncVar(Of T))
  fullName.vb: System.IEquatable(Of LiteEntitySystem.SyncVar(Of T)).Equals(LiteEntitySystem.SyncVar(Of T))
  name.vb: Equals(SyncVar(Of T))
  spec.csharp:
  - uid: System.IEquatable{LiteEntitySystem.SyncVar`1}.Equals(LiteEntitySystem.SyncVar{`0})
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: <
  - name: T
  - name: '>'
  - name: )
  spec.vb:
  - uid: System.IEquatable{LiteEntitySystem.SyncVar`1}.Equals(LiteEntitySystem.SyncVar{`0})
    name: Equals
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.iequatable-1.equals
  - name: (
  - uid: LiteEntitySystem.SyncVar`1
    name: SyncVar
    href: LiteEntitySystem.SyncVar-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
  - name: )
