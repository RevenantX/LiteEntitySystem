### YamlMime:ManagedReference
items:
- uid: LiteEntitySystem.Collections.CircularBuffer`1
  commentId: T:LiteEntitySystem.Collections.CircularBuffer`1
  id: CircularBuffer`1
  parent: LiteEntitySystem.Collections
  children:
  - LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32)
  - LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32,`0[])
  - LiteEntitySystem.Collections.CircularBuffer`1.Back
  - LiteEntitySystem.Collections.CircularBuffer`1.Capacity
  - LiteEntitySystem.Collections.CircularBuffer`1.Clear
  - LiteEntitySystem.Collections.CircularBuffer`1.Count
  - LiteEntitySystem.Collections.CircularBuffer`1.Front
  - LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty
  - LiteEntitySystem.Collections.CircularBuffer`1.IsFull
  - LiteEntitySystem.Collections.CircularBuffer`1.Item(System.Int32)
  - LiteEntitySystem.Collections.CircularBuffer`1.PopBack
  - LiteEntitySystem.Collections.CircularBuffer`1.PopFront
  - LiteEntitySystem.Collections.CircularBuffer`1.PushBack(`0)
  - LiteEntitySystem.Collections.CircularBuffer`1.PushFront(`0)
  langs:
  - csharp
  - vb
  name: CircularBuffer<T>
  nameWithType: CircularBuffer<T>
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>
  type: Class
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Circular buffer.


    When writing to a full buffer:

    PushBack -&gt; removes this[0] / Front()

    PushFront -&gt; removes this[Size-1] / Back()
  example: []
  syntax:
    content: public class CircularBuffer<T>
    typeParameters:
    - id: T
    content.vb: Public Class CircularBuffer(Of T)
  inheritance:
  - System.Object
  nameWithType.vb: CircularBuffer(Of T)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T)
  name.vb: CircularBuffer(Of T)
- uid: LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32)
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32)
  id: '#ctor(System.Int32)'
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: CircularBuffer(int)
  nameWithType: CircularBuffer<T>.CircularBuffer(int)
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.CircularBuffer(int)
  type: Constructor
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Initializes a new instance of the <xref href="LiteEntitySystem.Collections.CircularBuffer%601" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public CircularBuffer(int capacity)
    parameters:
    - id: capacity
      type: System.Int32
      description: Buffer capacity. Must be positive.
    content.vb: Public Sub New(capacity As Integer)
  overload: LiteEntitySystem.Collections.CircularBuffer`1.#ctor*
  nameWithType.vb: CircularBuffer(Of T).New(Integer)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).New(Integer)
  name.vb: New(Integer)
- uid: LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32,`0[])
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.#ctor(System.Int32,`0[])
  id: '#ctor(System.Int32,`0[])'
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: CircularBuffer(int, T[])
  nameWithType: CircularBuffer<T>.CircularBuffer(int, T[])
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.CircularBuffer(int, T[])
  type: Constructor
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Initializes a new instance of the <xref href="LiteEntitySystem.Collections.CircularBuffer%601" data-throw-if-not-resolved="false"></xref> class.
  example: []
  syntax:
    content: public CircularBuffer(int capacity, T[] items)
    parameters:
    - id: capacity
      type: System.Int32
      description: Buffer capacity. Must be positive.
    - id: items
      type: '{T}[]'
      description: Items to fill buffer with. Items length must be less or equal than capacity.
    content.vb: Public Sub New(capacity As Integer, items As T())
  overload: LiteEntitySystem.Collections.CircularBuffer`1.#ctor*
  nameWithType.vb: CircularBuffer(Of T).New(Integer, T())
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).New(Integer, T())
  name.vb: New(Integer, T())
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Capacity
  commentId: P:LiteEntitySystem.Collections.CircularBuffer`1.Capacity
  id: Capacity
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: Capacity
  nameWithType: CircularBuffer<T>.Capacity
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Capacity
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Maximum capacity of the buffer. Elements pushed into the buffer after

    maximum capacity is reached (IsFull = true), will remove an element.
  example: []
  syntax:
    content: public int Capacity { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Capacity As Integer
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Capacity*
  nameWithType.vb: CircularBuffer(Of T).Capacity
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Capacity
- uid: LiteEntitySystem.Collections.CircularBuffer`1.IsFull
  commentId: P:LiteEntitySystem.Collections.CircularBuffer`1.IsFull
  id: IsFull
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: IsFull
  nameWithType: CircularBuffer<T>.IsFull
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.IsFull
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Boolean indicating if Circular is at full capacity.

    Adding more elements when the buffer is full will

    cause elements to be removed from the other end

    of the buffer.
  example: []
  syntax:
    content: public bool IsFull { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsFull As Boolean
  overload: LiteEntitySystem.Collections.CircularBuffer`1.IsFull*
  nameWithType.vb: CircularBuffer(Of T).IsFull
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).IsFull
- uid: LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty
  commentId: P:LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty
  id: IsEmpty
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: IsEmpty
  nameWithType: CircularBuffer<T>.IsEmpty
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.IsEmpty
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: True if has no elements.
  example: []
  syntax:
    content: public bool IsEmpty { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: Public ReadOnly Property IsEmpty As Boolean
  overload: LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty*
  nameWithType.vb: CircularBuffer(Of T).IsEmpty
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).IsEmpty
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Count
  commentId: P:LiteEntitySystem.Collections.CircularBuffer`1.Count
  id: Count
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: CircularBuffer<T>.Count
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Count
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Current buffer size (the number of elements that the buffer has).
  example: []
  syntax:
    content: public int Count { get; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public ReadOnly Property Count As Integer
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Count*
  nameWithType.vb: CircularBuffer(Of T).Count
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Count
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Front
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.Front
  id: Front
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: Front()
  nameWithType: CircularBuffer<T>.Front()
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Front()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Element at the front of the buffer - this[0].
  example: []
  syntax:
    content: public T Front()
    return:
      type: '{T}'
      description: The value of the element of type T at the front of the buffer.
    content.vb: Public Function Front() As T
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Front*
  nameWithType.vb: CircularBuffer(Of T).Front()
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Front()
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Back
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.Back
  id: Back
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: Back()
  nameWithType: CircularBuffer<T>.Back()
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Back()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Element at the back of the buffer - this[Size - 1].
  example: []
  syntax:
    content: public T Back()
    return:
      type: '{T}'
      description: The value of the element of type T at the back of the buffer.
    content.vb: Public Function Back() As T
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Back*
  nameWithType.vb: CircularBuffer(Of T).Back()
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Back()
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Item(System.Int32)
  commentId: P:LiteEntitySystem.Collections.CircularBuffer`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: this[int]
  nameWithType: CircularBuffer<T>.this[int]
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.this[int]
  type: Property
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Index access to elements in buffer.

    Index does not loop around like when adding elements,

    valid interval is [0;Size]
  example: []
  syntax:
    content: public ref T this[int index] { get; }
    parameters:
    - id: index
      type: System.Int32
      description: Index of element to access.
    return:
      type: '{T}'
    content.vb: Public ReadOnly Default ByRef Property this[](index As Integer) As T
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Item*
  exceptions:
  - type: System.IndexOutOfRangeException
    commentId: T:System.IndexOutOfRangeException
    description: Thrown when index is outside of [; Size[ interval.
  nameWithType.vb: CircularBuffer(Of T).this[](Integer)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).this[](Integer)
  name.vb: this[](Integer)
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PushBack(`0)
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.PushBack(`0)
  id: PushBack(`0)
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: PushBack(T)
  nameWithType: CircularBuffer<T>.PushBack(T)
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PushBack(T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Pushes a new element to the back of the buffer. Back()/this[Size-1]

    will now return this element.


    When the buffer is full, the element at Front()/this[0] will be 

    popped to allow for this new element to fit.
  example: []
  syntax:
    content: public void PushBack(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to push to the back of the buffer
    content.vb: Public Sub PushBack(item As T)
  overload: LiteEntitySystem.Collections.CircularBuffer`1.PushBack*
  nameWithType.vb: CircularBuffer(Of T).PushBack(T)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PushBack(T)
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PushFront(`0)
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.PushFront(`0)
  id: PushFront(`0)
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: PushFront(T)
  nameWithType: CircularBuffer<T>.PushFront(T)
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PushFront(T)
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Pushes a new element to the front of the buffer. Front()/this[0]

    will now return this element.


    When the buffer is full, the element at Back()/this[Size-1] will be 

    popped to allow for this new element to fit.
  example: []
  syntax:
    content: public void PushFront(T item)
    parameters:
    - id: item
      type: '{T}'
      description: Item to push to the front of the buffer
    content.vb: Public Sub PushFront(item As T)
  overload: LiteEntitySystem.Collections.CircularBuffer`1.PushFront*
  nameWithType.vb: CircularBuffer(Of T).PushFront(T)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PushFront(T)
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PopBack
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.PopBack
  id: PopBack
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: PopBack()
  nameWithType: CircularBuffer<T>.PopBack()
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PopBack()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Removes the element at the back of the buffer. Decreasing the 

    Buffer size by 1.
  example: []
  syntax:
    content: public void PopBack()
    content.vb: Public Sub PopBack()
  overload: LiteEntitySystem.Collections.CircularBuffer`1.PopBack*
  nameWithType.vb: CircularBuffer(Of T).PopBack()
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PopBack()
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PopFront
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.PopFront
  id: PopFront
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: PopFront()
  nameWithType: CircularBuffer<T>.PopFront()
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PopFront()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: >-
    Removes the element at the front of the buffer. Decreasing the 

    Buffer size by 1.
  example: []
  syntax:
    content: public void PopFront()
    content.vb: Public Sub PopFront()
  overload: LiteEntitySystem.Collections.CircularBuffer`1.PopFront*
  nameWithType.vb: CircularBuffer(Of T).PopFront()
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PopFront()
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Clear
  commentId: M:LiteEntitySystem.Collections.CircularBuffer`1.Clear
  id: Clear
  parent: LiteEntitySystem.Collections.CircularBuffer`1
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: CircularBuffer<T>.Clear()
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Clear()
  type: Method
  assemblies:
  - LiteEntitySystem
  namespace: LiteEntitySystem.Collections
  summary: Clears the contents of the array. Size = 0, Capacity is unchanged.
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear()
  overload: LiteEntitySystem.Collections.CircularBuffer`1.Clear*
  nameWithType.vb: CircularBuffer(Of T).Clear()
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Clear()
references:
- uid: LiteEntitySystem.Collections
  commentId: N:LiteEntitySystem.Collections
  href: LiteEntitySystem.html
  name: LiteEntitySystem.Collections
  nameWithType: LiteEntitySystem.Collections
  fullName: LiteEntitySystem.Collections
  spec.csharp:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Collections
    name: Collections
    href: LiteEntitySystem.Collections.html
  spec.vb:
  - uid: LiteEntitySystem
    name: LiteEntitySystem
    href: LiteEntitySystem.html
  - name: .
  - uid: LiteEntitySystem.Collections
    name: Collections
    href: LiteEntitySystem.Collections.html
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: object
  nameWithType: object
  fullName: object
  nameWithType.vb: Object
  fullName.vb: Object
  name.vb: Object
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: LiteEntitySystem.Collections.CircularBuffer`1
  commentId: T:LiteEntitySystem.Collections.CircularBuffer`1
  href: LiteEntitySystem.Collections.CircularBuffer-1.html
  name: CircularBuffer<T>
  nameWithType: CircularBuffer<T>
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>
  nameWithType.vb: CircularBuffer(Of T)
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T)
  name.vb: CircularBuffer(Of T)
  spec.csharp:
  - uid: LiteEntitySystem.Collections.CircularBuffer`1
    name: CircularBuffer
    href: LiteEntitySystem.Collections.CircularBuffer-1.html
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: LiteEntitySystem.Collections.CircularBuffer`1
    name: CircularBuffer
    href: LiteEntitySystem.Collections.CircularBuffer-1.html
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: LiteEntitySystem.Collections.CircularBuffer`1.#ctor*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.#ctor
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1__ctor_System_Int32_
  name: CircularBuffer
  nameWithType: CircularBuffer<T>.CircularBuffer
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.CircularBuffer
  nameWithType.vb: CircularBuffer(Of T).New
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).New
  name.vb: New
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.int32
  name: int
  nameWithType: int
  fullName: int
  nameWithType.vb: Integer
  fullName.vb: Integer
  name.vb: Integer
- uid: '{T}[]'
  isExternal: true
  name: T[]
  nameWithType: T[]
  fullName: T[]
  nameWithType.vb: T()
  fullName.vb: T()
  name.vb: T()
  spec.csharp:
  - name: T
  - name: '['
  - name: ']'
  spec.vb:
  - name: T
  - name: (
  - name: )
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Capacity*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Capacity
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Capacity
  name: Capacity
  nameWithType: CircularBuffer<T>.Capacity
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Capacity
  nameWithType.vb: CircularBuffer(Of T).Capacity
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Capacity
- uid: LiteEntitySystem.Collections.CircularBuffer`1.IsFull*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.IsFull
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_IsFull
  name: IsFull
  nameWithType: CircularBuffer<T>.IsFull
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.IsFull
  nameWithType.vb: CircularBuffer(Of T).IsFull
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).IsFull
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.IsEmpty
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_IsEmpty
  name: IsEmpty
  nameWithType: CircularBuffer<T>.IsEmpty
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.IsEmpty
  nameWithType.vb: CircularBuffer(Of T).IsEmpty
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).IsEmpty
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Count*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Count
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Count
  name: Count
  nameWithType: CircularBuffer<T>.Count
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Count
  nameWithType.vb: CircularBuffer(Of T).Count
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Count
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Front*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Front
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Front
  name: Front
  nameWithType: CircularBuffer<T>.Front
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Front
  nameWithType.vb: CircularBuffer(Of T).Front
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Front
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  name: T
  nameWithType: T
  fullName: T
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Back*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Back
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Back
  name: Back
  nameWithType: CircularBuffer<T>.Back
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Back
  nameWithType.vb: CircularBuffer(Of T).Back
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Back
- uid: System.IndexOutOfRangeException
  commentId: T:System.IndexOutOfRangeException
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.indexoutofrangeexception
  name: IndexOutOfRangeException
  nameWithType: IndexOutOfRangeException
  fullName: System.IndexOutOfRangeException
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Item*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Item
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Item_System_Int32_
  name: this
  nameWithType: CircularBuffer<T>.this
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.this
  nameWithType.vb: CircularBuffer(Of T).this[]
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).this[]
  name.vb: this[]
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PushBack*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.PushBack
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_PushBack__0_
  name: PushBack
  nameWithType: CircularBuffer<T>.PushBack
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PushBack
  nameWithType.vb: CircularBuffer(Of T).PushBack
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PushBack
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PushFront*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.PushFront
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_PushFront__0_
  name: PushFront
  nameWithType: CircularBuffer<T>.PushFront
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PushFront
  nameWithType.vb: CircularBuffer(Of T).PushFront
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PushFront
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PopBack*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.PopBack
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_PopBack
  name: PopBack
  nameWithType: CircularBuffer<T>.PopBack
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PopBack
  nameWithType.vb: CircularBuffer(Of T).PopBack
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PopBack
- uid: LiteEntitySystem.Collections.CircularBuffer`1.PopFront*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.PopFront
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_PopFront
  name: PopFront
  nameWithType: CircularBuffer<T>.PopFront
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.PopFront
  nameWithType.vb: CircularBuffer(Of T).PopFront
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).PopFront
- uid: LiteEntitySystem.Collections.CircularBuffer`1.Clear*
  commentId: Overload:LiteEntitySystem.Collections.CircularBuffer`1.Clear
  href: LiteEntitySystem.Collections.CircularBuffer-1.html#LiteEntitySystem_Collections_CircularBuffer_1_Clear
  name: Clear
  nameWithType: CircularBuffer<T>.Clear
  fullName: LiteEntitySystem.Collections.CircularBuffer<T>.Clear
  nameWithType.vb: CircularBuffer(Of T).Clear
  fullName.vb: LiteEntitySystem.Collections.CircularBuffer(Of T).Clear
